/*
@calcom/api: Public API for Cal.com

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SelectedCalendarsAPIService SelectedCalendarsAPI service
type SelectedCalendarsAPIService service

type ApiEditSelectedCalendarByIdRequest struct {
	ctx context.Context
	ApiService *SelectedCalendarsAPIService
	apiKey *string
	userId int32
	externalId string
	integration string
}

// Your API Key
func (r ApiEditSelectedCalendarByIdRequest) ApiKey(apiKey string) ApiEditSelectedCalendarByIdRequest {
	r.apiKey = &apiKey
	return r
}

func (r ApiEditSelectedCalendarByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.EditSelectedCalendarByIdExecute(r)
}

/*
EditSelectedCalendarById Edit a selected calendar

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId userId of the selected calendar to get
 @param externalId externalId of the selected calendar to get
 @param integration integration of the selected calendar to get
 @return ApiEditSelectedCalendarByIdRequest
*/
func (a *SelectedCalendarsAPIService) EditSelectedCalendarById(ctx context.Context, userId int32, externalId string, integration string) ApiEditSelectedCalendarByIdRequest {
	return ApiEditSelectedCalendarByIdRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		externalId: externalId,
		integration: integration,
	}
}

// Execute executes the request
func (a *SelectedCalendarsAPIService) EditSelectedCalendarByIdExecute(r ApiEditSelectedCalendarByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SelectedCalendarsAPIService.EditSelectedCalendarById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/selected-calendars/{userId}_{integration}_{externalId}"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"externalId"+"}", url.PathEscape(parameterValueToString(r.externalId, "externalId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"integration"+"}", url.PathEscape(parameterValueToString(r.integration, "integration")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.apiKey == nil {
		return nil, reportError("apiKey is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "apiKey", r.apiKey, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("apiKey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSelectedCalendarByIdRequest struct {
	ctx context.Context
	ApiService *SelectedCalendarsAPIService
	apiKey *string
	userId int32
	externalId string
	integration string
}

// Your API Key
func (r ApiGetSelectedCalendarByIdRequest) ApiKey(apiKey string) ApiGetSelectedCalendarByIdRequest {
	r.apiKey = &apiKey
	return r
}

func (r ApiGetSelectedCalendarByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetSelectedCalendarByIdExecute(r)
}

/*
GetSelectedCalendarById Find a selected calendar by providing the compoundId(userId_integration_externalId) separated by `_`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId userId of the selected calendar to get
 @param externalId externalId of the selected calendar to get
 @param integration integration of the selected calendar to get
 @return ApiGetSelectedCalendarByIdRequest
*/
func (a *SelectedCalendarsAPIService) GetSelectedCalendarById(ctx context.Context, userId int32, externalId string, integration string) ApiGetSelectedCalendarByIdRequest {
	return ApiGetSelectedCalendarByIdRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		externalId: externalId,
		integration: integration,
	}
}

// Execute executes the request
func (a *SelectedCalendarsAPIService) GetSelectedCalendarByIdExecute(r ApiGetSelectedCalendarByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SelectedCalendarsAPIService.GetSelectedCalendarById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/selected-calendars/{userId}_{integration}_{externalId}"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"externalId"+"}", url.PathEscape(parameterValueToString(r.externalId, "externalId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"integration"+"}", url.PathEscape(parameterValueToString(r.integration, "integration")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.apiKey == nil {
		return nil, reportError("apiKey is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "apiKey", r.apiKey, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("apiKey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiListSelectedCalendarsRequest struct {
	ctx context.Context
	ApiService *SelectedCalendarsAPIService
	apiKey *string
}

// Your API Key
func (r ApiListSelectedCalendarsRequest) ApiKey(apiKey string) ApiListSelectedCalendarsRequest {
	r.apiKey = &apiKey
	return r
}

func (r ApiListSelectedCalendarsRequest) Execute() (*http.Response, error) {
	return r.ApiService.ListSelectedCalendarsExecute(r)
}

/*
ListSelectedCalendars Find all selected calendars

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListSelectedCalendarsRequest
*/
func (a *SelectedCalendarsAPIService) ListSelectedCalendars(ctx context.Context) ApiListSelectedCalendarsRequest {
	return ApiListSelectedCalendarsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SelectedCalendarsAPIService) ListSelectedCalendarsExecute(r ApiListSelectedCalendarsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SelectedCalendarsAPIService.ListSelectedCalendars")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/selected-calendars"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.apiKey == nil {
		return nil, reportError("apiKey is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "apiKey", r.apiKey, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("apiKey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiRemoveSelectedCalendarByIdRequest struct {
	ctx context.Context
	ApiService *SelectedCalendarsAPIService
	apiKey *string
	userId int32
	externalId int32
	integration string
}

// Your API Key
func (r ApiRemoveSelectedCalendarByIdRequest) ApiKey(apiKey string) ApiRemoveSelectedCalendarByIdRequest {
	r.apiKey = &apiKey
	return r
}

func (r ApiRemoveSelectedCalendarByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.RemoveSelectedCalendarByIdExecute(r)
}

/*
RemoveSelectedCalendarById Remove a selected calendar

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId userId of the selected calendar to get
 @param externalId externalId of the selected-calendar to get
 @param integration integration of the selected calendar to get
 @return ApiRemoveSelectedCalendarByIdRequest
*/
func (a *SelectedCalendarsAPIService) RemoveSelectedCalendarById(ctx context.Context, userId int32, externalId int32, integration string) ApiRemoveSelectedCalendarByIdRequest {
	return ApiRemoveSelectedCalendarByIdRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		externalId: externalId,
		integration: integration,
	}
}

// Execute executes the request
func (a *SelectedCalendarsAPIService) RemoveSelectedCalendarByIdExecute(r ApiRemoveSelectedCalendarByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SelectedCalendarsAPIService.RemoveSelectedCalendarById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/selected-calendars/{userId}_{integration}_{externalId}"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"externalId"+"}", url.PathEscape(parameterValueToString(r.externalId, "externalId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"integration"+"}", url.PathEscape(parameterValueToString(r.integration, "integration")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.apiKey == nil {
		return nil, reportError("apiKey is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "apiKey", r.apiKey, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("apiKey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSelectedCalendarsPostRequest struct {
	ctx context.Context
	ApiService *SelectedCalendarsAPIService
	apiKey *string
	selectedCalendarsPostRequest *SelectedCalendarsPostRequest
}

// Your API Key
func (r ApiSelectedCalendarsPostRequest) ApiKey(apiKey string) ApiSelectedCalendarsPostRequest {
	r.apiKey = &apiKey
	return r
}

// Create a new selected calendar
func (r ApiSelectedCalendarsPostRequest) SelectedCalendarsPostRequest(selectedCalendarsPostRequest SelectedCalendarsPostRequest) ApiSelectedCalendarsPostRequest {
	r.selectedCalendarsPostRequest = &selectedCalendarsPostRequest
	return r
}

func (r ApiSelectedCalendarsPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.SelectedCalendarsPostExecute(r)
}

/*
SelectedCalendarsPost Creates a new selected calendar

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSelectedCalendarsPostRequest
*/
func (a *SelectedCalendarsAPIService) SelectedCalendarsPost(ctx context.Context) ApiSelectedCalendarsPostRequest {
	return ApiSelectedCalendarsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SelectedCalendarsAPIService) SelectedCalendarsPostExecute(r ApiSelectedCalendarsPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SelectedCalendarsAPIService.SelectedCalendarsPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/selected-calendars"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.apiKey == nil {
		return nil, reportError("apiKey is required and must be specified")
	}
	if r.selectedCalendarsPostRequest == nil {
		return nil, reportError("selectedCalendarsPostRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "apiKey", r.apiKey, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.selectedCalendarsPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("apiKey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
