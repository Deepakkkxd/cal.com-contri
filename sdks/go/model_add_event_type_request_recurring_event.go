/*
@calcom/api: Public API for Cal.com

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AddEventTypeRequestRecurringEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddEventTypeRequestRecurringEvent{}

// AddEventTypeRequestRecurringEvent If the event should recur every week/month/year with the selected frequency
type AddEventTypeRequestRecurringEvent struct {
	Interval *int32 `json:"interval,omitempty"`
	Count *int32 `json:"count,omitempty"`
	Freq *int32 `json:"freq,omitempty"`
}

// NewAddEventTypeRequestRecurringEvent instantiates a new AddEventTypeRequestRecurringEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddEventTypeRequestRecurringEvent() *AddEventTypeRequestRecurringEvent {
	this := AddEventTypeRequestRecurringEvent{}
	return &this
}

// NewAddEventTypeRequestRecurringEventWithDefaults instantiates a new AddEventTypeRequestRecurringEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddEventTypeRequestRecurringEventWithDefaults() *AddEventTypeRequestRecurringEvent {
	this := AddEventTypeRequestRecurringEvent{}
	return &this
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *AddEventTypeRequestRecurringEvent) GetInterval() int32 {
	if o == nil || IsNil(o.Interval) {
		var ret int32
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddEventTypeRequestRecurringEvent) GetIntervalOk() (*int32, bool) {
	if o == nil || IsNil(o.Interval) {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *AddEventTypeRequestRecurringEvent) HasInterval() bool {
	if o != nil && !IsNil(o.Interval) {
		return true
	}

	return false
}

// SetInterval gets a reference to the given int32 and assigns it to the Interval field.
func (o *AddEventTypeRequestRecurringEvent) SetInterval(v int32) {
	o.Interval = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *AddEventTypeRequestRecurringEvent) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddEventTypeRequestRecurringEvent) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *AddEventTypeRequestRecurringEvent) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *AddEventTypeRequestRecurringEvent) SetCount(v int32) {
	o.Count = &v
}

// GetFreq returns the Freq field value if set, zero value otherwise.
func (o *AddEventTypeRequestRecurringEvent) GetFreq() int32 {
	if o == nil || IsNil(o.Freq) {
		var ret int32
		return ret
	}
	return *o.Freq
}

// GetFreqOk returns a tuple with the Freq field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddEventTypeRequestRecurringEvent) GetFreqOk() (*int32, bool) {
	if o == nil || IsNil(o.Freq) {
		return nil, false
	}
	return o.Freq, true
}

// HasFreq returns a boolean if a field has been set.
func (o *AddEventTypeRequestRecurringEvent) HasFreq() bool {
	if o != nil && !IsNil(o.Freq) {
		return true
	}

	return false
}

// SetFreq gets a reference to the given int32 and assigns it to the Freq field.
func (o *AddEventTypeRequestRecurringEvent) SetFreq(v int32) {
	o.Freq = &v
}

func (o AddEventTypeRequestRecurringEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddEventTypeRequestRecurringEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Interval) {
		toSerialize["interval"] = o.Interval
	}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.Freq) {
		toSerialize["freq"] = o.Freq
	}
	return toSerialize, nil
}

type NullableAddEventTypeRequestRecurringEvent struct {
	value *AddEventTypeRequestRecurringEvent
	isSet bool
}

func (v NullableAddEventTypeRequestRecurringEvent) Get() *AddEventTypeRequestRecurringEvent {
	return v.value
}

func (v *NullableAddEventTypeRequestRecurringEvent) Set(val *AddEventTypeRequestRecurringEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableAddEventTypeRequestRecurringEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableAddEventTypeRequestRecurringEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddEventTypeRequestRecurringEvent(val *AddEventTypeRequestRecurringEvent) *NullableAddEventTypeRequestRecurringEvent {
	return &NullableAddEventTypeRequestRecurringEvent{value: val, isSet: true}
}

func (v NullableAddEventTypeRequestRecurringEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddEventTypeRequestRecurringEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


