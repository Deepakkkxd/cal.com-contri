/*
@calcom/api: Public API for Cal.com

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the AddTeamRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddTeamRequest{}

// AddTeamRequest struct for AddTeamRequest
type AddTeamRequest struct {
	// Name of the team
	Name string `json:"name"`
	// A unique slug that works as path for the team public page
	Slug string `json:"slug"`
}

type _AddTeamRequest AddTeamRequest

// NewAddTeamRequest instantiates a new AddTeamRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddTeamRequest(name string, slug string) *AddTeamRequest {
	this := AddTeamRequest{}
	this.Name = name
	this.Slug = slug
	return &this
}

// NewAddTeamRequestWithDefaults instantiates a new AddTeamRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddTeamRequestWithDefaults() *AddTeamRequest {
	this := AddTeamRequest{}
	return &this
}

// GetName returns the Name field value
func (o *AddTeamRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AddTeamRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AddTeamRequest) SetName(v string) {
	o.Name = v
}

// GetSlug returns the Slug field value
func (o *AddTeamRequest) GetSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Slug
}

// GetSlugOk returns a tuple with the Slug field value
// and a boolean to check if the value has been set.
func (o *AddTeamRequest) GetSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Slug, true
}

// SetSlug sets field value
func (o *AddTeamRequest) SetSlug(v string) {
	o.Slug = v
}

func (o AddTeamRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddTeamRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["slug"] = o.Slug
	return toSerialize, nil
}

func (o *AddTeamRequest) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"slug",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddTeamRequest := _AddTeamRequest{}

	err = json.Unmarshal(bytes, &varAddTeamRequest)

	if err != nil {
		return err
	}

	*o = AddTeamRequest(varAddTeamRequest)

	return err
}

type NullableAddTeamRequest struct {
	value *AddTeamRequest
	isSet bool
}

func (v NullableAddTeamRequest) Get() *AddTeamRequest {
	return v.value
}

func (v *NullableAddTeamRequest) Set(val *AddTeamRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddTeamRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddTeamRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddTeamRequest(val *AddTeamRequest) *NullableAddTeamRequest {
	return &NullableAddTeamRequest{value: val, isSet: true}
}

func (v NullableAddTeamRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddTeamRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


