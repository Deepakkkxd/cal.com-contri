/*
@calcom/api: Public API for Cal.com

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the AddUserRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddUserRequest{}

// AddUserRequest struct for AddUserRequest
type AddUserRequest struct {
	// Email that belongs to the user being edited
	Email string `json:"email"`
	// Username for the user being created
	Username string `json:"username"`
	// The new user's brand color
	BrandColor *string `json:"brandColor,omitempty"`
	// The new user's brand color for dark mode
	DarkBrandColor *string `json:"darkBrandColor,omitempty"`
	// Remove branding from the user's calendar page
	HideBranding *bool `json:"hideBranding,omitempty"`
	// Start of the week. Acceptable values are one of [SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY]
	WeekStart *string `json:"weekStart,omitempty"`
	// The new user's time zone. Eg- 'EUROPE/PARIS'
	TimeZone *string `json:"timeZone,omitempty"`
	// Default theme for the new user. Acceptable values are one of [DARK, LIGHT]
	Theme *string `json:"theme,omitempty"`
	// The new user's time format. Acceptable values are one of [TWELVE, TWENTY_FOUR]
	TimeFormat *string `json:"timeFormat,omitempty"`
	// The new user's locale. Acceptable values are one of [EN, FR, IT, RU, ES, DE, PT, RO, NL, PT_BR, ES_419, KO, JA, PL, AR, IW, ZH_CH, ZH_TW, CS, SR, SV, VI]
	Locale *string `json:"locale,omitempty"`
	// The user's avatar, in base64 format
	Avatar *string `json:"avatar,omitempty"`
}

type _AddUserRequest AddUserRequest

// NewAddUserRequest instantiates a new AddUserRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddUserRequest(email string, username string) *AddUserRequest {
	this := AddUserRequest{}
	this.Email = email
	this.Username = username
	return &this
}

// NewAddUserRequestWithDefaults instantiates a new AddUserRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddUserRequestWithDefaults() *AddUserRequest {
	this := AddUserRequest{}
	return &this
}

// GetEmail returns the Email field value
func (o *AddUserRequest) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *AddUserRequest) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *AddUserRequest) SetEmail(v string) {
	o.Email = v
}

// GetUsername returns the Username field value
func (o *AddUserRequest) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *AddUserRequest) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *AddUserRequest) SetUsername(v string) {
	o.Username = v
}

// GetBrandColor returns the BrandColor field value if set, zero value otherwise.
func (o *AddUserRequest) GetBrandColor() string {
	if o == nil || IsNil(o.BrandColor) {
		var ret string
		return ret
	}
	return *o.BrandColor
}

// GetBrandColorOk returns a tuple with the BrandColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddUserRequest) GetBrandColorOk() (*string, bool) {
	if o == nil || IsNil(o.BrandColor) {
		return nil, false
	}
	return o.BrandColor, true
}

// HasBrandColor returns a boolean if a field has been set.
func (o *AddUserRequest) HasBrandColor() bool {
	if o != nil && !IsNil(o.BrandColor) {
		return true
	}

	return false
}

// SetBrandColor gets a reference to the given string and assigns it to the BrandColor field.
func (o *AddUserRequest) SetBrandColor(v string) {
	o.BrandColor = &v
}

// GetDarkBrandColor returns the DarkBrandColor field value if set, zero value otherwise.
func (o *AddUserRequest) GetDarkBrandColor() string {
	if o == nil || IsNil(o.DarkBrandColor) {
		var ret string
		return ret
	}
	return *o.DarkBrandColor
}

// GetDarkBrandColorOk returns a tuple with the DarkBrandColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddUserRequest) GetDarkBrandColorOk() (*string, bool) {
	if o == nil || IsNil(o.DarkBrandColor) {
		return nil, false
	}
	return o.DarkBrandColor, true
}

// HasDarkBrandColor returns a boolean if a field has been set.
func (o *AddUserRequest) HasDarkBrandColor() bool {
	if o != nil && !IsNil(o.DarkBrandColor) {
		return true
	}

	return false
}

// SetDarkBrandColor gets a reference to the given string and assigns it to the DarkBrandColor field.
func (o *AddUserRequest) SetDarkBrandColor(v string) {
	o.DarkBrandColor = &v
}

// GetHideBranding returns the HideBranding field value if set, zero value otherwise.
func (o *AddUserRequest) GetHideBranding() bool {
	if o == nil || IsNil(o.HideBranding) {
		var ret bool
		return ret
	}
	return *o.HideBranding
}

// GetHideBrandingOk returns a tuple with the HideBranding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddUserRequest) GetHideBrandingOk() (*bool, bool) {
	if o == nil || IsNil(o.HideBranding) {
		return nil, false
	}
	return o.HideBranding, true
}

// HasHideBranding returns a boolean if a field has been set.
func (o *AddUserRequest) HasHideBranding() bool {
	if o != nil && !IsNil(o.HideBranding) {
		return true
	}

	return false
}

// SetHideBranding gets a reference to the given bool and assigns it to the HideBranding field.
func (o *AddUserRequest) SetHideBranding(v bool) {
	o.HideBranding = &v
}

// GetWeekStart returns the WeekStart field value if set, zero value otherwise.
func (o *AddUserRequest) GetWeekStart() string {
	if o == nil || IsNil(o.WeekStart) {
		var ret string
		return ret
	}
	return *o.WeekStart
}

// GetWeekStartOk returns a tuple with the WeekStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddUserRequest) GetWeekStartOk() (*string, bool) {
	if o == nil || IsNil(o.WeekStart) {
		return nil, false
	}
	return o.WeekStart, true
}

// HasWeekStart returns a boolean if a field has been set.
func (o *AddUserRequest) HasWeekStart() bool {
	if o != nil && !IsNil(o.WeekStart) {
		return true
	}

	return false
}

// SetWeekStart gets a reference to the given string and assigns it to the WeekStart field.
func (o *AddUserRequest) SetWeekStart(v string) {
	o.WeekStart = &v
}

// GetTimeZone returns the TimeZone field value if set, zero value otherwise.
func (o *AddUserRequest) GetTimeZone() string {
	if o == nil || IsNil(o.TimeZone) {
		var ret string
		return ret
	}
	return *o.TimeZone
}

// GetTimeZoneOk returns a tuple with the TimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddUserRequest) GetTimeZoneOk() (*string, bool) {
	if o == nil || IsNil(o.TimeZone) {
		return nil, false
	}
	return o.TimeZone, true
}

// HasTimeZone returns a boolean if a field has been set.
func (o *AddUserRequest) HasTimeZone() bool {
	if o != nil && !IsNil(o.TimeZone) {
		return true
	}

	return false
}

// SetTimeZone gets a reference to the given string and assigns it to the TimeZone field.
func (o *AddUserRequest) SetTimeZone(v string) {
	o.TimeZone = &v
}

// GetTheme returns the Theme field value if set, zero value otherwise.
func (o *AddUserRequest) GetTheme() string {
	if o == nil || IsNil(o.Theme) {
		var ret string
		return ret
	}
	return *o.Theme
}

// GetThemeOk returns a tuple with the Theme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddUserRequest) GetThemeOk() (*string, bool) {
	if o == nil || IsNil(o.Theme) {
		return nil, false
	}
	return o.Theme, true
}

// HasTheme returns a boolean if a field has been set.
func (o *AddUserRequest) HasTheme() bool {
	if o != nil && !IsNil(o.Theme) {
		return true
	}

	return false
}

// SetTheme gets a reference to the given string and assigns it to the Theme field.
func (o *AddUserRequest) SetTheme(v string) {
	o.Theme = &v
}

// GetTimeFormat returns the TimeFormat field value if set, zero value otherwise.
func (o *AddUserRequest) GetTimeFormat() string {
	if o == nil || IsNil(o.TimeFormat) {
		var ret string
		return ret
	}
	return *o.TimeFormat
}

// GetTimeFormatOk returns a tuple with the TimeFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddUserRequest) GetTimeFormatOk() (*string, bool) {
	if o == nil || IsNil(o.TimeFormat) {
		return nil, false
	}
	return o.TimeFormat, true
}

// HasTimeFormat returns a boolean if a field has been set.
func (o *AddUserRequest) HasTimeFormat() bool {
	if o != nil && !IsNil(o.TimeFormat) {
		return true
	}

	return false
}

// SetTimeFormat gets a reference to the given string and assigns it to the TimeFormat field.
func (o *AddUserRequest) SetTimeFormat(v string) {
	o.TimeFormat = &v
}

// GetLocale returns the Locale field value if set, zero value otherwise.
func (o *AddUserRequest) GetLocale() string {
	if o == nil || IsNil(o.Locale) {
		var ret string
		return ret
	}
	return *o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddUserRequest) GetLocaleOk() (*string, bool) {
	if o == nil || IsNil(o.Locale) {
		return nil, false
	}
	return o.Locale, true
}

// HasLocale returns a boolean if a field has been set.
func (o *AddUserRequest) HasLocale() bool {
	if o != nil && !IsNil(o.Locale) {
		return true
	}

	return false
}

// SetLocale gets a reference to the given string and assigns it to the Locale field.
func (o *AddUserRequest) SetLocale(v string) {
	o.Locale = &v
}

// GetAvatar returns the Avatar field value if set, zero value otherwise.
func (o *AddUserRequest) GetAvatar() string {
	if o == nil || IsNil(o.Avatar) {
		var ret string
		return ret
	}
	return *o.Avatar
}

// GetAvatarOk returns a tuple with the Avatar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddUserRequest) GetAvatarOk() (*string, bool) {
	if o == nil || IsNil(o.Avatar) {
		return nil, false
	}
	return o.Avatar, true
}

// HasAvatar returns a boolean if a field has been set.
func (o *AddUserRequest) HasAvatar() bool {
	if o != nil && !IsNil(o.Avatar) {
		return true
	}

	return false
}

// SetAvatar gets a reference to the given string and assigns it to the Avatar field.
func (o *AddUserRequest) SetAvatar(v string) {
	o.Avatar = &v
}

func (o AddUserRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddUserRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["email"] = o.Email
	toSerialize["username"] = o.Username
	if !IsNil(o.BrandColor) {
		toSerialize["brandColor"] = o.BrandColor
	}
	if !IsNil(o.DarkBrandColor) {
		toSerialize["darkBrandColor"] = o.DarkBrandColor
	}
	if !IsNil(o.HideBranding) {
		toSerialize["hideBranding"] = o.HideBranding
	}
	if !IsNil(o.WeekStart) {
		toSerialize["weekStart"] = o.WeekStart
	}
	if !IsNil(o.TimeZone) {
		toSerialize["timeZone"] = o.TimeZone
	}
	if !IsNil(o.Theme) {
		toSerialize["theme"] = o.Theme
	}
	if !IsNil(o.TimeFormat) {
		toSerialize["timeFormat"] = o.TimeFormat
	}
	if !IsNil(o.Locale) {
		toSerialize["locale"] = o.Locale
	}
	if !IsNil(o.Avatar) {
		toSerialize["avatar"] = o.Avatar
	}
	return toSerialize, nil
}

func (o *AddUserRequest) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"email",
		"username",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddUserRequest := _AddUserRequest{}

	err = json.Unmarshal(bytes, &varAddUserRequest)

	if err != nil {
		return err
	}

	*o = AddUserRequest(varAddUserRequest)

	return err
}

type NullableAddUserRequest struct {
	value *AddUserRequest
	isSet bool
}

func (v NullableAddUserRequest) Get() *AddUserRequest {
	return v.value
}

func (v *NullableAddUserRequest) Set(val *AddUserRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddUserRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddUserRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddUserRequest(val *AddUserRequest) *NullableAddUserRequest {
	return &NullableAddUserRequest{value: val, isSet: true}
}

func (v NullableAddUserRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddUserRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


