/*
@calcom/api: Public API for Cal.com

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the AddWebhookRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddWebhookRequest{}

// AddWebhookRequest struct for AddWebhookRequest
type AddWebhookRequest struct {
	// The URL to subscribe to this webhook
	SubscriberUrl string `json:"subscriberUrl"`
	// The events which should trigger this webhook call
	EventTriggers string `json:"eventTriggers"`
	// Whether the webhook is active and should trigger on associated trigger events
	Active bool `json:"active"`
	// The template of the webhook's payload
	PayloadTemplate *string `json:"payloadTemplate,omitempty"`
	// The event type ID if this webhook should be associated with only that event type
	EventTypeId *float32 `json:"eventTypeId,omitempty"`
	// The secret to verify the authenticity of the received payload
	Secret *string `json:"secret,omitempty"`
}

type _AddWebhookRequest AddWebhookRequest

// NewAddWebhookRequest instantiates a new AddWebhookRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddWebhookRequest(subscriberUrl string, eventTriggers string, active bool) *AddWebhookRequest {
	this := AddWebhookRequest{}
	this.SubscriberUrl = subscriberUrl
	this.EventTriggers = eventTriggers
	this.Active = active
	return &this
}

// NewAddWebhookRequestWithDefaults instantiates a new AddWebhookRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddWebhookRequestWithDefaults() *AddWebhookRequest {
	this := AddWebhookRequest{}
	return &this
}

// GetSubscriberUrl returns the SubscriberUrl field value
func (o *AddWebhookRequest) GetSubscriberUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubscriberUrl
}

// GetSubscriberUrlOk returns a tuple with the SubscriberUrl field value
// and a boolean to check if the value has been set.
func (o *AddWebhookRequest) GetSubscriberUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubscriberUrl, true
}

// SetSubscriberUrl sets field value
func (o *AddWebhookRequest) SetSubscriberUrl(v string) {
	o.SubscriberUrl = v
}

// GetEventTriggers returns the EventTriggers field value
func (o *AddWebhookRequest) GetEventTriggers() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventTriggers
}

// GetEventTriggersOk returns a tuple with the EventTriggers field value
// and a boolean to check if the value has been set.
func (o *AddWebhookRequest) GetEventTriggersOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventTriggers, true
}

// SetEventTriggers sets field value
func (o *AddWebhookRequest) SetEventTriggers(v string) {
	o.EventTriggers = v
}

// GetActive returns the Active field value
func (o *AddWebhookRequest) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *AddWebhookRequest) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *AddWebhookRequest) SetActive(v bool) {
	o.Active = v
}

// GetPayloadTemplate returns the PayloadTemplate field value if set, zero value otherwise.
func (o *AddWebhookRequest) GetPayloadTemplate() string {
	if o == nil || IsNil(o.PayloadTemplate) {
		var ret string
		return ret
	}
	return *o.PayloadTemplate
}

// GetPayloadTemplateOk returns a tuple with the PayloadTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddWebhookRequest) GetPayloadTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.PayloadTemplate) {
		return nil, false
	}
	return o.PayloadTemplate, true
}

// HasPayloadTemplate returns a boolean if a field has been set.
func (o *AddWebhookRequest) HasPayloadTemplate() bool {
	if o != nil && !IsNil(o.PayloadTemplate) {
		return true
	}

	return false
}

// SetPayloadTemplate gets a reference to the given string and assigns it to the PayloadTemplate field.
func (o *AddWebhookRequest) SetPayloadTemplate(v string) {
	o.PayloadTemplate = &v
}

// GetEventTypeId returns the EventTypeId field value if set, zero value otherwise.
func (o *AddWebhookRequest) GetEventTypeId() float32 {
	if o == nil || IsNil(o.EventTypeId) {
		var ret float32
		return ret
	}
	return *o.EventTypeId
}

// GetEventTypeIdOk returns a tuple with the EventTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddWebhookRequest) GetEventTypeIdOk() (*float32, bool) {
	if o == nil || IsNil(o.EventTypeId) {
		return nil, false
	}
	return o.EventTypeId, true
}

// HasEventTypeId returns a boolean if a field has been set.
func (o *AddWebhookRequest) HasEventTypeId() bool {
	if o != nil && !IsNil(o.EventTypeId) {
		return true
	}

	return false
}

// SetEventTypeId gets a reference to the given float32 and assigns it to the EventTypeId field.
func (o *AddWebhookRequest) SetEventTypeId(v float32) {
	o.EventTypeId = &v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *AddWebhookRequest) GetSecret() string {
	if o == nil || IsNil(o.Secret) {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddWebhookRequest) GetSecretOk() (*string, bool) {
	if o == nil || IsNil(o.Secret) {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *AddWebhookRequest) HasSecret() bool {
	if o != nil && !IsNil(o.Secret) {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *AddWebhookRequest) SetSecret(v string) {
	o.Secret = &v
}

func (o AddWebhookRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddWebhookRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["subscriberUrl"] = o.SubscriberUrl
	toSerialize["eventTriggers"] = o.EventTriggers
	toSerialize["active"] = o.Active
	if !IsNil(o.PayloadTemplate) {
		toSerialize["payloadTemplate"] = o.PayloadTemplate
	}
	if !IsNil(o.EventTypeId) {
		toSerialize["eventTypeId"] = o.EventTypeId
	}
	if !IsNil(o.Secret) {
		toSerialize["secret"] = o.Secret
	}
	return toSerialize, nil
}

func (o *AddWebhookRequest) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"subscriberUrl",
		"eventTriggers",
		"active",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddWebhookRequest := _AddWebhookRequest{}

	err = json.Unmarshal(bytes, &varAddWebhookRequest)

	if err != nil {
		return err
	}

	*o = AddWebhookRequest(varAddWebhookRequest)

	return err
}

type NullableAddWebhookRequest struct {
	value *AddWebhookRequest
	isSet bool
}

func (v NullableAddWebhookRequest) Get() *AddWebhookRequest {
	return v.value
}

func (v *NullableAddWebhookRequest) Set(val *AddWebhookRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddWebhookRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddWebhookRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddWebhookRequest(val *AddWebhookRequest) *NullableAddWebhookRequest {
	return &NullableAddWebhookRequest{value: val, isSet: true}
}

func (v NullableAddWebhookRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddWebhookRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


