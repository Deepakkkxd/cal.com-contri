/*
@calcom/api: Public API for Cal.com

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the EditEventTypeByIdRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EditEventTypeByIdRequest{}

// EditEventTypeByIdRequest struct for EditEventTypeByIdRequest
type EditEventTypeByIdRequest struct {
	// Duration of the event type in minutes
	Length *int32 `json:"length,omitempty"`
	// Metadata relating to event type. Pass {} if empty
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// Title of the event type
	Title *string `json:"title,omitempty"`
	// Unique slug for the event type
	Slug *string `json:"slug,omitempty"`
	// The ID of the schedule for this event type
	ScheduleId *float32 `json:"scheduleId,omitempty"`
	Hosts []AddEventTypeRequestHostsInner `json:"hosts,omitempty"`
	// If the event type should be hidden from your public booking page
	Hidden *bool `json:"hidden,omitempty"`
	// The position of the event type on the public booking page
	Position *int32 `json:"position,omitempty"`
	// Team ID if the event type should belong to a team
	TeamId *int32 `json:"teamId,omitempty"`
	// To decide how far into the future an invitee can book an event with you
	PeriodType *string `json:"periodType,omitempty"`
	// Start date of bookable period (Required if periodType is 'range')
	PeriodStartDate *time.Time `json:"periodStartDate,omitempty"`
	// End date of bookable period (Required if periodType is 'range')
	PeriodEndDate *time.Time `json:"periodEndDate,omitempty"`
	// Number of bookable days (Required if periodType is rolling)
	PeriodDays *int32 `json:"periodDays,omitempty"`
	// If calendar days should be counted for period days
	PeriodCountCalendarDays *bool `json:"periodCountCalendarDays,omitempty"`
	// If the event type should require your confirmation before completing the booking
	RequiresConfirmation *bool `json:"requiresConfirmation,omitempty"`
	RecurringEvent *AddEventTypeRequestRecurringEvent `json:"recurringEvent,omitempty"`
	// If the event type should disable adding guests to the booking
	DisableGuests *bool `json:"disableGuests,omitempty"`
	// If the calendar notes should be hidden from the booking
	HideCalendarNotes *bool `json:"hideCalendarNotes,omitempty"`
	// Minimum time in minutes before the event is bookable
	MinimumBookingNotice *int32 `json:"minimumBookingNotice,omitempty"`
	// Number of minutes of buffer time before a Cal Event
	BeforeEventBuffer *int32 `json:"beforeEventBuffer,omitempty"`
	// Number of minutes of buffer time after a Cal Event
	AfterEventBuffer *int32 `json:"afterEventBuffer,omitempty"`
	// The type of scheduling if a Team event. Required for team events only
	SchedulingType *string `json:"schedulingType,omitempty"`
	// Price of the event type booking
	Price *int32 `json:"price,omitempty"`
	// Currency acronym. Eg- usd, eur, gbp, etc.
	Currency *string `json:"currency,omitempty"`
	// The intervals of available bookable slots in minutes
	SlotInterval *int32 `json:"slotInterval,omitempty"`
	// A valid URL where the booker will redirect to, once the booking is completed successfully
	SuccessRedirectUrl *string `json:"successRedirectUrl,omitempty"`
	// Description of the event type
	Description *string `json:"description,omitempty"`
	// The number of seats for each time slot
	SeatsPerTimeSlot *int32 `json:"seatsPerTimeSlot,omitempty"`
	// Share Attendee information in seats
	SeatsShowAttendees *bool `json:"seatsShowAttendees,omitempty"`
	// Show the number of available seats
	SeatsShowAvailabilityCount *bool `json:"seatsShowAvailabilityCount,omitempty"`
	// A list of all available locations for the event type
	Locations [][]AddEventTypeRequestLocationsInnerInner `json:"locations,omitempty"`
}

// NewEditEventTypeByIdRequest instantiates a new EditEventTypeByIdRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditEventTypeByIdRequest() *EditEventTypeByIdRequest {
	this := EditEventTypeByIdRequest{}
	return &this
}

// NewEditEventTypeByIdRequestWithDefaults instantiates a new EditEventTypeByIdRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditEventTypeByIdRequestWithDefaults() *EditEventTypeByIdRequest {
	this := EditEventTypeByIdRequest{}
	return &this
}

// GetLength returns the Length field value if set, zero value otherwise.
func (o *EditEventTypeByIdRequest) GetLength() int32 {
	if o == nil || IsNil(o.Length) {
		var ret int32
		return ret
	}
	return *o.Length
}

// GetLengthOk returns a tuple with the Length field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditEventTypeByIdRequest) GetLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.Length) {
		return nil, false
	}
	return o.Length, true
}

// HasLength returns a boolean if a field has been set.
func (o *EditEventTypeByIdRequest) HasLength() bool {
	if o != nil && !IsNil(o.Length) {
		return true
	}

	return false
}

// SetLength gets a reference to the given int32 and assigns it to the Length field.
func (o *EditEventTypeByIdRequest) SetLength(v int32) {
	o.Length = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *EditEventTypeByIdRequest) GetMetadata() map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditEventTypeByIdRequest) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *EditEventTypeByIdRequest) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *EditEventTypeByIdRequest) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *EditEventTypeByIdRequest) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditEventTypeByIdRequest) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *EditEventTypeByIdRequest) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *EditEventTypeByIdRequest) SetTitle(v string) {
	o.Title = &v
}

// GetSlug returns the Slug field value if set, zero value otherwise.
func (o *EditEventTypeByIdRequest) GetSlug() string {
	if o == nil || IsNil(o.Slug) {
		var ret string
		return ret
	}
	return *o.Slug
}

// GetSlugOk returns a tuple with the Slug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditEventTypeByIdRequest) GetSlugOk() (*string, bool) {
	if o == nil || IsNil(o.Slug) {
		return nil, false
	}
	return o.Slug, true
}

// HasSlug returns a boolean if a field has been set.
func (o *EditEventTypeByIdRequest) HasSlug() bool {
	if o != nil && !IsNil(o.Slug) {
		return true
	}

	return false
}

// SetSlug gets a reference to the given string and assigns it to the Slug field.
func (o *EditEventTypeByIdRequest) SetSlug(v string) {
	o.Slug = &v
}

// GetScheduleId returns the ScheduleId field value if set, zero value otherwise.
func (o *EditEventTypeByIdRequest) GetScheduleId() float32 {
	if o == nil || IsNil(o.ScheduleId) {
		var ret float32
		return ret
	}
	return *o.ScheduleId
}

// GetScheduleIdOk returns a tuple with the ScheduleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditEventTypeByIdRequest) GetScheduleIdOk() (*float32, bool) {
	if o == nil || IsNil(o.ScheduleId) {
		return nil, false
	}
	return o.ScheduleId, true
}

// HasScheduleId returns a boolean if a field has been set.
func (o *EditEventTypeByIdRequest) HasScheduleId() bool {
	if o != nil && !IsNil(o.ScheduleId) {
		return true
	}

	return false
}

// SetScheduleId gets a reference to the given float32 and assigns it to the ScheduleId field.
func (o *EditEventTypeByIdRequest) SetScheduleId(v float32) {
	o.ScheduleId = &v
}

// GetHosts returns the Hosts field value if set, zero value otherwise.
func (o *EditEventTypeByIdRequest) GetHosts() []AddEventTypeRequestHostsInner {
	if o == nil || IsNil(o.Hosts) {
		var ret []AddEventTypeRequestHostsInner
		return ret
	}
	return o.Hosts
}

// GetHostsOk returns a tuple with the Hosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditEventTypeByIdRequest) GetHostsOk() ([]AddEventTypeRequestHostsInner, bool) {
	if o == nil || IsNil(o.Hosts) {
		return nil, false
	}
	return o.Hosts, true
}

// HasHosts returns a boolean if a field has been set.
func (o *EditEventTypeByIdRequest) HasHosts() bool {
	if o != nil && !IsNil(o.Hosts) {
		return true
	}

	return false
}

// SetHosts gets a reference to the given []AddEventTypeRequestHostsInner and assigns it to the Hosts field.
func (o *EditEventTypeByIdRequest) SetHosts(v []AddEventTypeRequestHostsInner) {
	o.Hosts = v
}

// GetHidden returns the Hidden field value if set, zero value otherwise.
func (o *EditEventTypeByIdRequest) GetHidden() bool {
	if o == nil || IsNil(o.Hidden) {
		var ret bool
		return ret
	}
	return *o.Hidden
}

// GetHiddenOk returns a tuple with the Hidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditEventTypeByIdRequest) GetHiddenOk() (*bool, bool) {
	if o == nil || IsNil(o.Hidden) {
		return nil, false
	}
	return o.Hidden, true
}

// HasHidden returns a boolean if a field has been set.
func (o *EditEventTypeByIdRequest) HasHidden() bool {
	if o != nil && !IsNil(o.Hidden) {
		return true
	}

	return false
}

// SetHidden gets a reference to the given bool and assigns it to the Hidden field.
func (o *EditEventTypeByIdRequest) SetHidden(v bool) {
	o.Hidden = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *EditEventTypeByIdRequest) GetPosition() int32 {
	if o == nil || IsNil(o.Position) {
		var ret int32
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditEventTypeByIdRequest) GetPositionOk() (*int32, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *EditEventTypeByIdRequest) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given int32 and assigns it to the Position field.
func (o *EditEventTypeByIdRequest) SetPosition(v int32) {
	o.Position = &v
}

// GetTeamId returns the TeamId field value if set, zero value otherwise.
func (o *EditEventTypeByIdRequest) GetTeamId() int32 {
	if o == nil || IsNil(o.TeamId) {
		var ret int32
		return ret
	}
	return *o.TeamId
}

// GetTeamIdOk returns a tuple with the TeamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditEventTypeByIdRequest) GetTeamIdOk() (*int32, bool) {
	if o == nil || IsNil(o.TeamId) {
		return nil, false
	}
	return o.TeamId, true
}

// HasTeamId returns a boolean if a field has been set.
func (o *EditEventTypeByIdRequest) HasTeamId() bool {
	if o != nil && !IsNil(o.TeamId) {
		return true
	}

	return false
}

// SetTeamId gets a reference to the given int32 and assigns it to the TeamId field.
func (o *EditEventTypeByIdRequest) SetTeamId(v int32) {
	o.TeamId = &v
}

// GetPeriodType returns the PeriodType field value if set, zero value otherwise.
func (o *EditEventTypeByIdRequest) GetPeriodType() string {
	if o == nil || IsNil(o.PeriodType) {
		var ret string
		return ret
	}
	return *o.PeriodType
}

// GetPeriodTypeOk returns a tuple with the PeriodType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditEventTypeByIdRequest) GetPeriodTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PeriodType) {
		return nil, false
	}
	return o.PeriodType, true
}

// HasPeriodType returns a boolean if a field has been set.
func (o *EditEventTypeByIdRequest) HasPeriodType() bool {
	if o != nil && !IsNil(o.PeriodType) {
		return true
	}

	return false
}

// SetPeriodType gets a reference to the given string and assigns it to the PeriodType field.
func (o *EditEventTypeByIdRequest) SetPeriodType(v string) {
	o.PeriodType = &v
}

// GetPeriodStartDate returns the PeriodStartDate field value if set, zero value otherwise.
func (o *EditEventTypeByIdRequest) GetPeriodStartDate() time.Time {
	if o == nil || IsNil(o.PeriodStartDate) {
		var ret time.Time
		return ret
	}
	return *o.PeriodStartDate
}

// GetPeriodStartDateOk returns a tuple with the PeriodStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditEventTypeByIdRequest) GetPeriodStartDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PeriodStartDate) {
		return nil, false
	}
	return o.PeriodStartDate, true
}

// HasPeriodStartDate returns a boolean if a field has been set.
func (o *EditEventTypeByIdRequest) HasPeriodStartDate() bool {
	if o != nil && !IsNil(o.PeriodStartDate) {
		return true
	}

	return false
}

// SetPeriodStartDate gets a reference to the given time.Time and assigns it to the PeriodStartDate field.
func (o *EditEventTypeByIdRequest) SetPeriodStartDate(v time.Time) {
	o.PeriodStartDate = &v
}

// GetPeriodEndDate returns the PeriodEndDate field value if set, zero value otherwise.
func (o *EditEventTypeByIdRequest) GetPeriodEndDate() time.Time {
	if o == nil || IsNil(o.PeriodEndDate) {
		var ret time.Time
		return ret
	}
	return *o.PeriodEndDate
}

// GetPeriodEndDateOk returns a tuple with the PeriodEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditEventTypeByIdRequest) GetPeriodEndDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PeriodEndDate) {
		return nil, false
	}
	return o.PeriodEndDate, true
}

// HasPeriodEndDate returns a boolean if a field has been set.
func (o *EditEventTypeByIdRequest) HasPeriodEndDate() bool {
	if o != nil && !IsNil(o.PeriodEndDate) {
		return true
	}

	return false
}

// SetPeriodEndDate gets a reference to the given time.Time and assigns it to the PeriodEndDate field.
func (o *EditEventTypeByIdRequest) SetPeriodEndDate(v time.Time) {
	o.PeriodEndDate = &v
}

// GetPeriodDays returns the PeriodDays field value if set, zero value otherwise.
func (o *EditEventTypeByIdRequest) GetPeriodDays() int32 {
	if o == nil || IsNil(o.PeriodDays) {
		var ret int32
		return ret
	}
	return *o.PeriodDays
}

// GetPeriodDaysOk returns a tuple with the PeriodDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditEventTypeByIdRequest) GetPeriodDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.PeriodDays) {
		return nil, false
	}
	return o.PeriodDays, true
}

// HasPeriodDays returns a boolean if a field has been set.
func (o *EditEventTypeByIdRequest) HasPeriodDays() bool {
	if o != nil && !IsNil(o.PeriodDays) {
		return true
	}

	return false
}

// SetPeriodDays gets a reference to the given int32 and assigns it to the PeriodDays field.
func (o *EditEventTypeByIdRequest) SetPeriodDays(v int32) {
	o.PeriodDays = &v
}

// GetPeriodCountCalendarDays returns the PeriodCountCalendarDays field value if set, zero value otherwise.
func (o *EditEventTypeByIdRequest) GetPeriodCountCalendarDays() bool {
	if o == nil || IsNil(o.PeriodCountCalendarDays) {
		var ret bool
		return ret
	}
	return *o.PeriodCountCalendarDays
}

// GetPeriodCountCalendarDaysOk returns a tuple with the PeriodCountCalendarDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditEventTypeByIdRequest) GetPeriodCountCalendarDaysOk() (*bool, bool) {
	if o == nil || IsNil(o.PeriodCountCalendarDays) {
		return nil, false
	}
	return o.PeriodCountCalendarDays, true
}

// HasPeriodCountCalendarDays returns a boolean if a field has been set.
func (o *EditEventTypeByIdRequest) HasPeriodCountCalendarDays() bool {
	if o != nil && !IsNil(o.PeriodCountCalendarDays) {
		return true
	}

	return false
}

// SetPeriodCountCalendarDays gets a reference to the given bool and assigns it to the PeriodCountCalendarDays field.
func (o *EditEventTypeByIdRequest) SetPeriodCountCalendarDays(v bool) {
	o.PeriodCountCalendarDays = &v
}

// GetRequiresConfirmation returns the RequiresConfirmation field value if set, zero value otherwise.
func (o *EditEventTypeByIdRequest) GetRequiresConfirmation() bool {
	if o == nil || IsNil(o.RequiresConfirmation) {
		var ret bool
		return ret
	}
	return *o.RequiresConfirmation
}

// GetRequiresConfirmationOk returns a tuple with the RequiresConfirmation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditEventTypeByIdRequest) GetRequiresConfirmationOk() (*bool, bool) {
	if o == nil || IsNil(o.RequiresConfirmation) {
		return nil, false
	}
	return o.RequiresConfirmation, true
}

// HasRequiresConfirmation returns a boolean if a field has been set.
func (o *EditEventTypeByIdRequest) HasRequiresConfirmation() bool {
	if o != nil && !IsNil(o.RequiresConfirmation) {
		return true
	}

	return false
}

// SetRequiresConfirmation gets a reference to the given bool and assigns it to the RequiresConfirmation field.
func (o *EditEventTypeByIdRequest) SetRequiresConfirmation(v bool) {
	o.RequiresConfirmation = &v
}

// GetRecurringEvent returns the RecurringEvent field value if set, zero value otherwise.
func (o *EditEventTypeByIdRequest) GetRecurringEvent() AddEventTypeRequestRecurringEvent {
	if o == nil || IsNil(o.RecurringEvent) {
		var ret AddEventTypeRequestRecurringEvent
		return ret
	}
	return *o.RecurringEvent
}

// GetRecurringEventOk returns a tuple with the RecurringEvent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditEventTypeByIdRequest) GetRecurringEventOk() (*AddEventTypeRequestRecurringEvent, bool) {
	if o == nil || IsNil(o.RecurringEvent) {
		return nil, false
	}
	return o.RecurringEvent, true
}

// HasRecurringEvent returns a boolean if a field has been set.
func (o *EditEventTypeByIdRequest) HasRecurringEvent() bool {
	if o != nil && !IsNil(o.RecurringEvent) {
		return true
	}

	return false
}

// SetRecurringEvent gets a reference to the given AddEventTypeRequestRecurringEvent and assigns it to the RecurringEvent field.
func (o *EditEventTypeByIdRequest) SetRecurringEvent(v AddEventTypeRequestRecurringEvent) {
	o.RecurringEvent = &v
}

// GetDisableGuests returns the DisableGuests field value if set, zero value otherwise.
func (o *EditEventTypeByIdRequest) GetDisableGuests() bool {
	if o == nil || IsNil(o.DisableGuests) {
		var ret bool
		return ret
	}
	return *o.DisableGuests
}

// GetDisableGuestsOk returns a tuple with the DisableGuests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditEventTypeByIdRequest) GetDisableGuestsOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableGuests) {
		return nil, false
	}
	return o.DisableGuests, true
}

// HasDisableGuests returns a boolean if a field has been set.
func (o *EditEventTypeByIdRequest) HasDisableGuests() bool {
	if o != nil && !IsNil(o.DisableGuests) {
		return true
	}

	return false
}

// SetDisableGuests gets a reference to the given bool and assigns it to the DisableGuests field.
func (o *EditEventTypeByIdRequest) SetDisableGuests(v bool) {
	o.DisableGuests = &v
}

// GetHideCalendarNotes returns the HideCalendarNotes field value if set, zero value otherwise.
func (o *EditEventTypeByIdRequest) GetHideCalendarNotes() bool {
	if o == nil || IsNil(o.HideCalendarNotes) {
		var ret bool
		return ret
	}
	return *o.HideCalendarNotes
}

// GetHideCalendarNotesOk returns a tuple with the HideCalendarNotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditEventTypeByIdRequest) GetHideCalendarNotesOk() (*bool, bool) {
	if o == nil || IsNil(o.HideCalendarNotes) {
		return nil, false
	}
	return o.HideCalendarNotes, true
}

// HasHideCalendarNotes returns a boolean if a field has been set.
func (o *EditEventTypeByIdRequest) HasHideCalendarNotes() bool {
	if o != nil && !IsNil(o.HideCalendarNotes) {
		return true
	}

	return false
}

// SetHideCalendarNotes gets a reference to the given bool and assigns it to the HideCalendarNotes field.
func (o *EditEventTypeByIdRequest) SetHideCalendarNotes(v bool) {
	o.HideCalendarNotes = &v
}

// GetMinimumBookingNotice returns the MinimumBookingNotice field value if set, zero value otherwise.
func (o *EditEventTypeByIdRequest) GetMinimumBookingNotice() int32 {
	if o == nil || IsNil(o.MinimumBookingNotice) {
		var ret int32
		return ret
	}
	return *o.MinimumBookingNotice
}

// GetMinimumBookingNoticeOk returns a tuple with the MinimumBookingNotice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditEventTypeByIdRequest) GetMinimumBookingNoticeOk() (*int32, bool) {
	if o == nil || IsNil(o.MinimumBookingNotice) {
		return nil, false
	}
	return o.MinimumBookingNotice, true
}

// HasMinimumBookingNotice returns a boolean if a field has been set.
func (o *EditEventTypeByIdRequest) HasMinimumBookingNotice() bool {
	if o != nil && !IsNil(o.MinimumBookingNotice) {
		return true
	}

	return false
}

// SetMinimumBookingNotice gets a reference to the given int32 and assigns it to the MinimumBookingNotice field.
func (o *EditEventTypeByIdRequest) SetMinimumBookingNotice(v int32) {
	o.MinimumBookingNotice = &v
}

// GetBeforeEventBuffer returns the BeforeEventBuffer field value if set, zero value otherwise.
func (o *EditEventTypeByIdRequest) GetBeforeEventBuffer() int32 {
	if o == nil || IsNil(o.BeforeEventBuffer) {
		var ret int32
		return ret
	}
	return *o.BeforeEventBuffer
}

// GetBeforeEventBufferOk returns a tuple with the BeforeEventBuffer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditEventTypeByIdRequest) GetBeforeEventBufferOk() (*int32, bool) {
	if o == nil || IsNil(o.BeforeEventBuffer) {
		return nil, false
	}
	return o.BeforeEventBuffer, true
}

// HasBeforeEventBuffer returns a boolean if a field has been set.
func (o *EditEventTypeByIdRequest) HasBeforeEventBuffer() bool {
	if o != nil && !IsNil(o.BeforeEventBuffer) {
		return true
	}

	return false
}

// SetBeforeEventBuffer gets a reference to the given int32 and assigns it to the BeforeEventBuffer field.
func (o *EditEventTypeByIdRequest) SetBeforeEventBuffer(v int32) {
	o.BeforeEventBuffer = &v
}

// GetAfterEventBuffer returns the AfterEventBuffer field value if set, zero value otherwise.
func (o *EditEventTypeByIdRequest) GetAfterEventBuffer() int32 {
	if o == nil || IsNil(o.AfterEventBuffer) {
		var ret int32
		return ret
	}
	return *o.AfterEventBuffer
}

// GetAfterEventBufferOk returns a tuple with the AfterEventBuffer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditEventTypeByIdRequest) GetAfterEventBufferOk() (*int32, bool) {
	if o == nil || IsNil(o.AfterEventBuffer) {
		return nil, false
	}
	return o.AfterEventBuffer, true
}

// HasAfterEventBuffer returns a boolean if a field has been set.
func (o *EditEventTypeByIdRequest) HasAfterEventBuffer() bool {
	if o != nil && !IsNil(o.AfterEventBuffer) {
		return true
	}

	return false
}

// SetAfterEventBuffer gets a reference to the given int32 and assigns it to the AfterEventBuffer field.
func (o *EditEventTypeByIdRequest) SetAfterEventBuffer(v int32) {
	o.AfterEventBuffer = &v
}

// GetSchedulingType returns the SchedulingType field value if set, zero value otherwise.
func (o *EditEventTypeByIdRequest) GetSchedulingType() string {
	if o == nil || IsNil(o.SchedulingType) {
		var ret string
		return ret
	}
	return *o.SchedulingType
}

// GetSchedulingTypeOk returns a tuple with the SchedulingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditEventTypeByIdRequest) GetSchedulingTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SchedulingType) {
		return nil, false
	}
	return o.SchedulingType, true
}

// HasSchedulingType returns a boolean if a field has been set.
func (o *EditEventTypeByIdRequest) HasSchedulingType() bool {
	if o != nil && !IsNil(o.SchedulingType) {
		return true
	}

	return false
}

// SetSchedulingType gets a reference to the given string and assigns it to the SchedulingType field.
func (o *EditEventTypeByIdRequest) SetSchedulingType(v string) {
	o.SchedulingType = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *EditEventTypeByIdRequest) GetPrice() int32 {
	if o == nil || IsNil(o.Price) {
		var ret int32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditEventTypeByIdRequest) GetPriceOk() (*int32, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *EditEventTypeByIdRequest) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given int32 and assigns it to the Price field.
func (o *EditEventTypeByIdRequest) SetPrice(v int32) {
	o.Price = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *EditEventTypeByIdRequest) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditEventTypeByIdRequest) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *EditEventTypeByIdRequest) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *EditEventTypeByIdRequest) SetCurrency(v string) {
	o.Currency = &v
}

// GetSlotInterval returns the SlotInterval field value if set, zero value otherwise.
func (o *EditEventTypeByIdRequest) GetSlotInterval() int32 {
	if o == nil || IsNil(o.SlotInterval) {
		var ret int32
		return ret
	}
	return *o.SlotInterval
}

// GetSlotIntervalOk returns a tuple with the SlotInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditEventTypeByIdRequest) GetSlotIntervalOk() (*int32, bool) {
	if o == nil || IsNil(o.SlotInterval) {
		return nil, false
	}
	return o.SlotInterval, true
}

// HasSlotInterval returns a boolean if a field has been set.
func (o *EditEventTypeByIdRequest) HasSlotInterval() bool {
	if o != nil && !IsNil(o.SlotInterval) {
		return true
	}

	return false
}

// SetSlotInterval gets a reference to the given int32 and assigns it to the SlotInterval field.
func (o *EditEventTypeByIdRequest) SetSlotInterval(v int32) {
	o.SlotInterval = &v
}

// GetSuccessRedirectUrl returns the SuccessRedirectUrl field value if set, zero value otherwise.
func (o *EditEventTypeByIdRequest) GetSuccessRedirectUrl() string {
	if o == nil || IsNil(o.SuccessRedirectUrl) {
		var ret string
		return ret
	}
	return *o.SuccessRedirectUrl
}

// GetSuccessRedirectUrlOk returns a tuple with the SuccessRedirectUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditEventTypeByIdRequest) GetSuccessRedirectUrlOk() (*string, bool) {
	if o == nil || IsNil(o.SuccessRedirectUrl) {
		return nil, false
	}
	return o.SuccessRedirectUrl, true
}

// HasSuccessRedirectUrl returns a boolean if a field has been set.
func (o *EditEventTypeByIdRequest) HasSuccessRedirectUrl() bool {
	if o != nil && !IsNil(o.SuccessRedirectUrl) {
		return true
	}

	return false
}

// SetSuccessRedirectUrl gets a reference to the given string and assigns it to the SuccessRedirectUrl field.
func (o *EditEventTypeByIdRequest) SetSuccessRedirectUrl(v string) {
	o.SuccessRedirectUrl = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EditEventTypeByIdRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditEventTypeByIdRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EditEventTypeByIdRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EditEventTypeByIdRequest) SetDescription(v string) {
	o.Description = &v
}

// GetSeatsPerTimeSlot returns the SeatsPerTimeSlot field value if set, zero value otherwise.
func (o *EditEventTypeByIdRequest) GetSeatsPerTimeSlot() int32 {
	if o == nil || IsNil(o.SeatsPerTimeSlot) {
		var ret int32
		return ret
	}
	return *o.SeatsPerTimeSlot
}

// GetSeatsPerTimeSlotOk returns a tuple with the SeatsPerTimeSlot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditEventTypeByIdRequest) GetSeatsPerTimeSlotOk() (*int32, bool) {
	if o == nil || IsNil(o.SeatsPerTimeSlot) {
		return nil, false
	}
	return o.SeatsPerTimeSlot, true
}

// HasSeatsPerTimeSlot returns a boolean if a field has been set.
func (o *EditEventTypeByIdRequest) HasSeatsPerTimeSlot() bool {
	if o != nil && !IsNil(o.SeatsPerTimeSlot) {
		return true
	}

	return false
}

// SetSeatsPerTimeSlot gets a reference to the given int32 and assigns it to the SeatsPerTimeSlot field.
func (o *EditEventTypeByIdRequest) SetSeatsPerTimeSlot(v int32) {
	o.SeatsPerTimeSlot = &v
}

// GetSeatsShowAttendees returns the SeatsShowAttendees field value if set, zero value otherwise.
func (o *EditEventTypeByIdRequest) GetSeatsShowAttendees() bool {
	if o == nil || IsNil(o.SeatsShowAttendees) {
		var ret bool
		return ret
	}
	return *o.SeatsShowAttendees
}

// GetSeatsShowAttendeesOk returns a tuple with the SeatsShowAttendees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditEventTypeByIdRequest) GetSeatsShowAttendeesOk() (*bool, bool) {
	if o == nil || IsNil(o.SeatsShowAttendees) {
		return nil, false
	}
	return o.SeatsShowAttendees, true
}

// HasSeatsShowAttendees returns a boolean if a field has been set.
func (o *EditEventTypeByIdRequest) HasSeatsShowAttendees() bool {
	if o != nil && !IsNil(o.SeatsShowAttendees) {
		return true
	}

	return false
}

// SetSeatsShowAttendees gets a reference to the given bool and assigns it to the SeatsShowAttendees field.
func (o *EditEventTypeByIdRequest) SetSeatsShowAttendees(v bool) {
	o.SeatsShowAttendees = &v
}

// GetSeatsShowAvailabilityCount returns the SeatsShowAvailabilityCount field value if set, zero value otherwise.
func (o *EditEventTypeByIdRequest) GetSeatsShowAvailabilityCount() bool {
	if o == nil || IsNil(o.SeatsShowAvailabilityCount) {
		var ret bool
		return ret
	}
	return *o.SeatsShowAvailabilityCount
}

// GetSeatsShowAvailabilityCountOk returns a tuple with the SeatsShowAvailabilityCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditEventTypeByIdRequest) GetSeatsShowAvailabilityCountOk() (*bool, bool) {
	if o == nil || IsNil(o.SeatsShowAvailabilityCount) {
		return nil, false
	}
	return o.SeatsShowAvailabilityCount, true
}

// HasSeatsShowAvailabilityCount returns a boolean if a field has been set.
func (o *EditEventTypeByIdRequest) HasSeatsShowAvailabilityCount() bool {
	if o != nil && !IsNil(o.SeatsShowAvailabilityCount) {
		return true
	}

	return false
}

// SetSeatsShowAvailabilityCount gets a reference to the given bool and assigns it to the SeatsShowAvailabilityCount field.
func (o *EditEventTypeByIdRequest) SetSeatsShowAvailabilityCount(v bool) {
	o.SeatsShowAvailabilityCount = &v
}

// GetLocations returns the Locations field value if set, zero value otherwise.
func (o *EditEventTypeByIdRequest) GetLocations() [][]AddEventTypeRequestLocationsInnerInner {
	if o == nil || IsNil(o.Locations) {
		var ret [][]AddEventTypeRequestLocationsInnerInner
		return ret
	}
	return o.Locations
}

// GetLocationsOk returns a tuple with the Locations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditEventTypeByIdRequest) GetLocationsOk() ([][]AddEventTypeRequestLocationsInnerInner, bool) {
	if o == nil || IsNil(o.Locations) {
		return nil, false
	}
	return o.Locations, true
}

// HasLocations returns a boolean if a field has been set.
func (o *EditEventTypeByIdRequest) HasLocations() bool {
	if o != nil && !IsNil(o.Locations) {
		return true
	}

	return false
}

// SetLocations gets a reference to the given [][]AddEventTypeRequestLocationsInnerInner and assigns it to the Locations field.
func (o *EditEventTypeByIdRequest) SetLocations(v [][]AddEventTypeRequestLocationsInnerInner) {
	o.Locations = v
}

func (o EditEventTypeByIdRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EditEventTypeByIdRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Length) {
		toSerialize["length"] = o.Length
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Slug) {
		toSerialize["slug"] = o.Slug
	}
	if !IsNil(o.ScheduleId) {
		toSerialize["scheduleId"] = o.ScheduleId
	}
	if !IsNil(o.Hosts) {
		toSerialize["hosts"] = o.Hosts
	}
	if !IsNil(o.Hidden) {
		toSerialize["hidden"] = o.Hidden
	}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	if !IsNil(o.TeamId) {
		toSerialize["teamId"] = o.TeamId
	}
	if !IsNil(o.PeriodType) {
		toSerialize["periodType"] = o.PeriodType
	}
	if !IsNil(o.PeriodStartDate) {
		toSerialize["periodStartDate"] = o.PeriodStartDate
	}
	if !IsNil(o.PeriodEndDate) {
		toSerialize["periodEndDate"] = o.PeriodEndDate
	}
	if !IsNil(o.PeriodDays) {
		toSerialize["periodDays"] = o.PeriodDays
	}
	if !IsNil(o.PeriodCountCalendarDays) {
		toSerialize["periodCountCalendarDays"] = o.PeriodCountCalendarDays
	}
	if !IsNil(o.RequiresConfirmation) {
		toSerialize["requiresConfirmation"] = o.RequiresConfirmation
	}
	if !IsNil(o.RecurringEvent) {
		toSerialize["recurringEvent"] = o.RecurringEvent
	}
	if !IsNil(o.DisableGuests) {
		toSerialize["disableGuests"] = o.DisableGuests
	}
	if !IsNil(o.HideCalendarNotes) {
		toSerialize["hideCalendarNotes"] = o.HideCalendarNotes
	}
	if !IsNil(o.MinimumBookingNotice) {
		toSerialize["minimumBookingNotice"] = o.MinimumBookingNotice
	}
	if !IsNil(o.BeforeEventBuffer) {
		toSerialize["beforeEventBuffer"] = o.BeforeEventBuffer
	}
	if !IsNil(o.AfterEventBuffer) {
		toSerialize["afterEventBuffer"] = o.AfterEventBuffer
	}
	if !IsNil(o.SchedulingType) {
		toSerialize["schedulingType"] = o.SchedulingType
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.SlotInterval) {
		toSerialize["slotInterval"] = o.SlotInterval
	}
	if !IsNil(o.SuccessRedirectUrl) {
		toSerialize["successRedirectUrl"] = o.SuccessRedirectUrl
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.SeatsPerTimeSlot) {
		toSerialize["seatsPerTimeSlot"] = o.SeatsPerTimeSlot
	}
	if !IsNil(o.SeatsShowAttendees) {
		toSerialize["seatsShowAttendees"] = o.SeatsShowAttendees
	}
	if !IsNil(o.SeatsShowAvailabilityCount) {
		toSerialize["seatsShowAvailabilityCount"] = o.SeatsShowAvailabilityCount
	}
	if !IsNil(o.Locations) {
		toSerialize["locations"] = o.Locations
	}
	return toSerialize, nil
}

type NullableEditEventTypeByIdRequest struct {
	value *EditEventTypeByIdRequest
	isSet bool
}

func (v NullableEditEventTypeByIdRequest) Get() *EditEventTypeByIdRequest {
	return v.value
}

func (v *NullableEditEventTypeByIdRequest) Set(val *EditEventTypeByIdRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEditEventTypeByIdRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEditEventTypeByIdRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditEventTypeByIdRequest(val *EditEventTypeByIdRequest) *NullableEditEventTypeByIdRequest {
	return &NullableEditEventTypeByIdRequest{value: val, isSet: true}
}

func (v NullableEditEventTypeByIdRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditEventTypeByIdRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


