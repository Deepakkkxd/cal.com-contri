/*
@calcom/api: Public API for Cal.com

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EditWebhookByIdRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EditWebhookByIdRequest{}

// EditWebhookByIdRequest struct for EditWebhookByIdRequest
type EditWebhookByIdRequest struct {
	// The URL to subscribe to this webhook
	SubscriberUrl *string `json:"subscriberUrl,omitempty"`
	// The events which should trigger this webhook call
	EventTriggers *string `json:"eventTriggers,omitempty"`
	// Whether the webhook is active and should trigger on associated trigger events
	Active *bool `json:"active,omitempty"`
	// The template of the webhook's payload
	PayloadTemplate *string `json:"payloadTemplate,omitempty"`
	// The event type ID if this webhook should be associated with only that event type
	EventTypeId *float32 `json:"eventTypeId,omitempty"`
	// The secret to verify the authenticity of the received payload
	Secret *string `json:"secret,omitempty"`
}

// NewEditWebhookByIdRequest instantiates a new EditWebhookByIdRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditWebhookByIdRequest() *EditWebhookByIdRequest {
	this := EditWebhookByIdRequest{}
	return &this
}

// NewEditWebhookByIdRequestWithDefaults instantiates a new EditWebhookByIdRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditWebhookByIdRequestWithDefaults() *EditWebhookByIdRequest {
	this := EditWebhookByIdRequest{}
	return &this
}

// GetSubscriberUrl returns the SubscriberUrl field value if set, zero value otherwise.
func (o *EditWebhookByIdRequest) GetSubscriberUrl() string {
	if o == nil || IsNil(o.SubscriberUrl) {
		var ret string
		return ret
	}
	return *o.SubscriberUrl
}

// GetSubscriberUrlOk returns a tuple with the SubscriberUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditWebhookByIdRequest) GetSubscriberUrlOk() (*string, bool) {
	if o == nil || IsNil(o.SubscriberUrl) {
		return nil, false
	}
	return o.SubscriberUrl, true
}

// HasSubscriberUrl returns a boolean if a field has been set.
func (o *EditWebhookByIdRequest) HasSubscriberUrl() bool {
	if o != nil && !IsNil(o.SubscriberUrl) {
		return true
	}

	return false
}

// SetSubscriberUrl gets a reference to the given string and assigns it to the SubscriberUrl field.
func (o *EditWebhookByIdRequest) SetSubscriberUrl(v string) {
	o.SubscriberUrl = &v
}

// GetEventTriggers returns the EventTriggers field value if set, zero value otherwise.
func (o *EditWebhookByIdRequest) GetEventTriggers() string {
	if o == nil || IsNil(o.EventTriggers) {
		var ret string
		return ret
	}
	return *o.EventTriggers
}

// GetEventTriggersOk returns a tuple with the EventTriggers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditWebhookByIdRequest) GetEventTriggersOk() (*string, bool) {
	if o == nil || IsNil(o.EventTriggers) {
		return nil, false
	}
	return o.EventTriggers, true
}

// HasEventTriggers returns a boolean if a field has been set.
func (o *EditWebhookByIdRequest) HasEventTriggers() bool {
	if o != nil && !IsNil(o.EventTriggers) {
		return true
	}

	return false
}

// SetEventTriggers gets a reference to the given string and assigns it to the EventTriggers field.
func (o *EditWebhookByIdRequest) SetEventTriggers(v string) {
	o.EventTriggers = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *EditWebhookByIdRequest) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditWebhookByIdRequest) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *EditWebhookByIdRequest) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *EditWebhookByIdRequest) SetActive(v bool) {
	o.Active = &v
}

// GetPayloadTemplate returns the PayloadTemplate field value if set, zero value otherwise.
func (o *EditWebhookByIdRequest) GetPayloadTemplate() string {
	if o == nil || IsNil(o.PayloadTemplate) {
		var ret string
		return ret
	}
	return *o.PayloadTemplate
}

// GetPayloadTemplateOk returns a tuple with the PayloadTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditWebhookByIdRequest) GetPayloadTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.PayloadTemplate) {
		return nil, false
	}
	return o.PayloadTemplate, true
}

// HasPayloadTemplate returns a boolean if a field has been set.
func (o *EditWebhookByIdRequest) HasPayloadTemplate() bool {
	if o != nil && !IsNil(o.PayloadTemplate) {
		return true
	}

	return false
}

// SetPayloadTemplate gets a reference to the given string and assigns it to the PayloadTemplate field.
func (o *EditWebhookByIdRequest) SetPayloadTemplate(v string) {
	o.PayloadTemplate = &v
}

// GetEventTypeId returns the EventTypeId field value if set, zero value otherwise.
func (o *EditWebhookByIdRequest) GetEventTypeId() float32 {
	if o == nil || IsNil(o.EventTypeId) {
		var ret float32
		return ret
	}
	return *o.EventTypeId
}

// GetEventTypeIdOk returns a tuple with the EventTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditWebhookByIdRequest) GetEventTypeIdOk() (*float32, bool) {
	if o == nil || IsNil(o.EventTypeId) {
		return nil, false
	}
	return o.EventTypeId, true
}

// HasEventTypeId returns a boolean if a field has been set.
func (o *EditWebhookByIdRequest) HasEventTypeId() bool {
	if o != nil && !IsNil(o.EventTypeId) {
		return true
	}

	return false
}

// SetEventTypeId gets a reference to the given float32 and assigns it to the EventTypeId field.
func (o *EditWebhookByIdRequest) SetEventTypeId(v float32) {
	o.EventTypeId = &v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *EditWebhookByIdRequest) GetSecret() string {
	if o == nil || IsNil(o.Secret) {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditWebhookByIdRequest) GetSecretOk() (*string, bool) {
	if o == nil || IsNil(o.Secret) {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *EditWebhookByIdRequest) HasSecret() bool {
	if o != nil && !IsNil(o.Secret) {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *EditWebhookByIdRequest) SetSecret(v string) {
	o.Secret = &v
}

func (o EditWebhookByIdRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EditWebhookByIdRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SubscriberUrl) {
		toSerialize["subscriberUrl"] = o.SubscriberUrl
	}
	if !IsNil(o.EventTriggers) {
		toSerialize["eventTriggers"] = o.EventTriggers
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.PayloadTemplate) {
		toSerialize["payloadTemplate"] = o.PayloadTemplate
	}
	if !IsNil(o.EventTypeId) {
		toSerialize["eventTypeId"] = o.EventTypeId
	}
	if !IsNil(o.Secret) {
		toSerialize["secret"] = o.Secret
	}
	return toSerialize, nil
}

type NullableEditWebhookByIdRequest struct {
	value *EditWebhookByIdRequest
	isSet bool
}

func (v NullableEditWebhookByIdRequest) Get() *EditWebhookByIdRequest {
	return v.value
}

func (v *NullableEditWebhookByIdRequest) Set(val *EditWebhookByIdRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEditWebhookByIdRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEditWebhookByIdRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditWebhookByIdRequest(val *EditWebhookByIdRequest) *NullableEditWebhookByIdRequest {
	return &NullableEditWebhookByIdRequest{value: val, isSet: true}
}

func (v NullableEditWebhookByIdRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditWebhookByIdRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


