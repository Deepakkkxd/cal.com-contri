# coding: utf-8

"""
    @calcom/api: Public API for Cal.com

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from openapi_client.models.add_booking_request_responses import AddBookingRequestResponses
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AddBookingRequest(BaseModel):
    """
    AddBookingRequest
    """ # noqa: E501
    event_type_id: StrictInt = Field(description="ID of the event type to book", alias="eventTypeId")
    start: datetime = Field(description="Start time of the Event")
    end: Optional[datetime] = Field(default=None, description="End time of the Event")
    responses: AddBookingRequestResponses
    metadata: Dict[str, Any] = Field(description="Any metadata associated with the booking")
    time_zone: StrictStr = Field(description="TimeZone of the Attendee", alias="timeZone")
    language: StrictStr = Field(description="Language of the Attendee")
    title: Optional[StrictStr] = Field(default=None, description="Booking event title")
    recurring_event_id: Optional[StrictInt] = Field(default=None, description="Recurring event ID if the event is recurring", alias="recurringEventId")
    description: Optional[StrictStr] = Field(default=None, description="Event description")
    status: Optional[StrictStr] = Field(default=None, description="Acceptable values one of [\"ACCEPTED\", \"PENDING\", \"CANCELLED\", \"REJECTED\"]")
    seats_per_time_slot: Optional[StrictInt] = Field(default=None, description="The number of seats for each time slot", alias="seatsPerTimeSlot")
    seats_show_attendees: Optional[StrictBool] = Field(default=None, description="Share Attendee information in seats", alias="seatsShowAttendees")
    seats_show_availability_count: Optional[StrictBool] = Field(default=None, description="Show the number of available seats", alias="seatsShowAvailabilityCount")
    sms_reminder_number: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="SMS reminder number", alias="smsReminderNumber")
    __properties: ClassVar[List[str]] = ["eventTypeId", "start", "end", "responses", "metadata", "timeZone", "language", "title", "recurringEventId", "description", "status", "seatsPerTimeSlot", "seatsShowAttendees", "seatsShowAvailabilityCount", "smsReminderNumber"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AddBookingRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of responses
        if self.responses:
            _dict['responses'] = self.responses.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AddBookingRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "eventTypeId": obj.get("eventTypeId"),
            "start": obj.get("start"),
            "end": obj.get("end"),
            "responses": AddBookingRequestResponses.from_dict(obj.get("responses")) if obj.get("responses") is not None else None,
            "metadata": obj.get("metadata"),
            "timeZone": obj.get("timeZone"),
            "language": obj.get("language"),
            "title": obj.get("title"),
            "recurringEventId": obj.get("recurringEventId"),
            "description": obj.get("description"),
            "status": obj.get("status"),
            "seatsPerTimeSlot": obj.get("seatsPerTimeSlot"),
            "seatsShowAttendees": obj.get("seatsShowAttendees"),
            "seatsShowAvailabilityCount": obj.get("seatsShowAvailabilityCount"),
            "smsReminderNumber": obj.get("smsReminderNumber")
        })
        return _obj


