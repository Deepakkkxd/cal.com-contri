# coding: utf-8

"""
    @calcom/api: Public API for Cal.com

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from openapi_client.models.booking_attendees_inner import BookingAttendeesInner
from openapi_client.models.booking_payment_inner import BookingPaymentInner
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Booking(BaseModel):
    """
    Booking
    """ # noqa: E501
    id: Optional[Union[StrictFloat, StrictInt]] = None
    description: Optional[StrictStr] = None
    event_type_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="eventTypeId")
    uid: Optional[StrictStr] = None
    title: Optional[StrictStr] = None
    start_time: Optional[datetime] = Field(default=None, alias="startTime")
    end_time: Optional[datetime] = Field(default=None, alias="endTime")
    time_zone: Optional[StrictStr] = Field(default=None, alias="timeZone")
    attendees: Optional[List[BookingAttendeesInner]] = None
    user: Optional[BookingAttendeesInner] = None
    payment: Optional[List[BookingPaymentInner]] = None
    __properties: ClassVar[List[str]] = ["id", "description", "eventTypeId", "uid", "title", "startTime", "endTime", "timeZone", "attendees", "user", "payment"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Booking from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attendees (list)
        _items = []
        if self.attendees:
            for _item in self.attendees:
                if _item:
                    _items.append(_item.to_dict())
            _dict['attendees'] = _items
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in payment (list)
        _items = []
        if self.payment:
            for _item in self.payment:
                if _item:
                    _items.append(_item.to_dict())
            _dict['payment'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Booking from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "description": obj.get("description"),
            "eventTypeId": obj.get("eventTypeId"),
            "uid": obj.get("uid"),
            "title": obj.get("title"),
            "startTime": obj.get("startTime"),
            "endTime": obj.get("endTime"),
            "timeZone": obj.get("timeZone"),
            "attendees": [BookingAttendeesInner.from_dict(_item) for _item in obj.get("attendees")] if obj.get("attendees") is not None else None,
            "user": BookingAttendeesInner.from_dict(obj.get("user")) if obj.get("user") is not None else None,
            "payment": [BookingPaymentInner.from_dict(_item) for _item in obj.get("payment")] if obj.get("payment") is not None else None
        })
        return _obj


