# coding: utf-8

"""
    @calcom/api: Public API for Cal.com

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from openapi_client.models.custom_inputs_post_request_options import CustomInputsPostRequestOptions
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CustomInputsPostRequest(BaseModel):
    """
    CustomInputsPostRequest
    """ # noqa: E501
    event_type_id: StrictInt = Field(description="ID of the event type to which the custom input is being added", alias="eventTypeId")
    label: StrictStr = Field(description="Label of the custom input")
    type: StrictStr = Field(description="Type of the custom input. The value is ENUM; one of [TEXT, TEXTLONG, NUMBER, BOOL, RADIO, PHONE]")
    options: Optional[CustomInputsPostRequestOptions] = None
    required: StrictBool = Field(description="If the custom input is required before booking")
    placeholder: StrictStr = Field(description="Placeholder text for the custom input")
    __properties: ClassVar[List[str]] = ["eventTypeId", "label", "type", "options", "required", "placeholder"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CustomInputsPostRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of options
        if self.options:
            _dict['options'] = self.options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CustomInputsPostRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "eventTypeId": obj.get("eventTypeId"),
            "label": obj.get("label"),
            "type": obj.get("type"),
            "options": CustomInputsPostRequestOptions.from_dict(obj.get("options")) if obj.get("options") is not None else None,
            "required": obj.get("required"),
            "placeholder": obj.get("placeholder")
        })
        return _obj


