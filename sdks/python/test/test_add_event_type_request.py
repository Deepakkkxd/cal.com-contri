# coding: utf-8

"""
    @calcom/api: Public API for Cal.com

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.add_event_type_request import AddEventTypeRequest

class TestAddEventTypeRequest(unittest.TestCase):
    """AddEventTypeRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AddEventTypeRequest:
        """Test AddEventTypeRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AddEventTypeRequest`
        """
        model = AddEventTypeRequest()
        if include_optional:
            return AddEventTypeRequest(
                length = 56,
                metadata = None,
                title = '',
                slug = '',
                hosts = [
                    openapi_client.models.add_event_type_request_hosts_inner.addEventType_request_hosts_inner(
                        user_id = 1.337, 
                        is_fixed = True, )
                    ],
                hidden = True,
                schedule_id = 1.337,
                position = 56,
                team_id = 56,
                period_type = 'UNLIMITED',
                period_start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                period_end_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                period_days = 56,
                period_count_calendar_days = True,
                requires_confirmation = True,
                recurring_event = openapi_client.models.add_event_type_request_recurring_event.addEventType_request_recurringEvent(
                    interval = 56, 
                    count = 56, 
                    freq = 56, ),
                disable_guests = True,
                hide_calendar_notes = True,
                minimum_booking_notice = 56,
                before_event_buffer = 56,
                after_event_buffer = 56,
                scheduling_type = 'ROUND_ROBIN',
                price = 56,
                parent_id = 56,
                currency = '',
                slot_interval = 56,
                success_redirect_url = '',
                description = '',
                locations = [
                    [
                        null
                        ]
                    ]
            )
        else:
            return AddEventTypeRequest(
                length = 56,
                metadata = None,
                title = '',
                slug = '',
        )
        """

    def testAddEventTypeRequest(self):
        """Test AddEventTypeRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
