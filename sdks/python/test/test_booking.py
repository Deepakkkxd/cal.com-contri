# coding: utf-8

"""
    @calcom/api: Public API for Cal.com

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.booking import Booking

class TestBooking(unittest.TestCase):
    """Booking unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Booking:
        """Test Booking
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Booking`
        """
        model = Booking()
        if include_optional:
            return Booking(
                id = 1.337,
                description = '',
                event_type_id = 1.337,
                uid = '',
                title = '',
                start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                time_zone = 'Europe/London',
                attendees = [
                    openapi_client.models.booking_attendees_inner.Booking_attendees_inner(
                        email = 'example@cal.com', 
                        name = '', 
                        time_zone = 'Europe/London', 
                        locale = 'en', )
                    ],
                user = openapi_client.models.booking_attendees_inner.Booking_attendees_inner(
                    email = 'example@cal.com', 
                    name = '', 
                    time_zone = 'Europe/London', 
                    locale = 'en', ),
                payment = [
                    openapi_client.models.booking_payment_inner.Booking_payment_inner(
                        id = 1, 
                        success = True, 
                        payment_option = 'ON_BOOKING', )
                    ]
            )
        else:
            return Booking(
        )
        """

    def testBooking(self):
        """Test Booking"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
