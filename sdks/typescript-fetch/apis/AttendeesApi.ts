/* tslint:disable */
/* eslint-disable */
/**
 * @calcom/api: Public API for Cal.com
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddAttendeeRequest,
  EditAttendeeByIdRequest,
} from '../models/index';
import {
    AddAttendeeRequestFromJSON,
    AddAttendeeRequestToJSON,
    EditAttendeeByIdRequestFromJSON,
    EditAttendeeByIdRequestToJSON,
} from '../models/index';

export interface AddAttendeeOperationRequest {
    apiKey: string;
    addAttendeeRequest: AddAttendeeRequest;
}

export interface EditAttendeeByIdOperationRequest {
    apiKey: string;
    id: number;
    editAttendeeByIdRequest: EditAttendeeByIdRequest;
}

export interface GetAttendeeByIdRequest {
    apiKey: string;
    id: number;
}

export interface ListAttendeesRequest {
    apiKey: string;
}

export interface RemoveAttendeeByIdRequest {
    apiKey: string;
    id: number;
}

/**
 * 
 */
export class AttendeesApi extends runtime.BaseAPI {

    /**
     * Creates a new attendee
     */
    async addAttendeeRaw(requestParameters: AddAttendeeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling addAttendee.');
        }

        if (requestParameters.addAttendeeRequest === null || requestParameters.addAttendeeRequest === undefined) {
            throw new runtime.RequiredError('addAttendeeRequest','Required parameter requestParameters.addAttendeeRequest was null or undefined when calling addAttendee.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/attendees`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddAttendeeRequestToJSON(requestParameters.addAttendeeRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Creates a new attendee
     */
    async addAttendee(requestParameters: AddAttendeeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addAttendeeRaw(requestParameters, initOverrides);
    }

    /**
     * Edit an existing attendee
     */
    async editAttendeeByIdRaw(requestParameters: EditAttendeeByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling editAttendeeById.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling editAttendeeById.');
        }

        if (requestParameters.editAttendeeByIdRequest === null || requestParameters.editAttendeeByIdRequest === undefined) {
            throw new runtime.RequiredError('editAttendeeByIdRequest','Required parameter requestParameters.editAttendeeByIdRequest was null or undefined when calling editAttendeeById.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/attendees/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: EditAttendeeByIdRequestToJSON(requestParameters.editAttendeeByIdRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Edit an existing attendee
     */
    async editAttendeeById(requestParameters: EditAttendeeByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.editAttendeeByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Find an attendee
     */
    async getAttendeeByIdRaw(requestParameters: GetAttendeeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling getAttendeeById.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAttendeeById.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/attendees/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Find an attendee
     */
    async getAttendeeById(requestParameters: GetAttendeeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getAttendeeByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Find all attendees
     */
    async listAttendeesRaw(requestParameters: ListAttendeesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling listAttendees.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/attendees`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Find all attendees
     */
    async listAttendees(requestParameters: ListAttendeesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.listAttendeesRaw(requestParameters, initOverrides);
    }

    /**
     * Remove an existing attendee
     */
    async removeAttendeeByIdRaw(requestParameters: RemoveAttendeeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling removeAttendeeById.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removeAttendeeById.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/attendees/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove an existing attendee
     */
    async removeAttendeeById(requestParameters: RemoveAttendeeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeAttendeeByIdRaw(requestParameters, initOverrides);
    }

}
