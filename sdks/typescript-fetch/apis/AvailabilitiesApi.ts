/* tslint:disable */
/* eslint-disable */
/**
 * @calcom/api: Public API for Cal.com
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddAvailabilityRequest,
  EditAvailabilityByIdRequest,
} from '../models/index';
import {
    AddAvailabilityRequestFromJSON,
    AddAvailabilityRequestToJSON,
    EditAvailabilityByIdRequestFromJSON,
    EditAvailabilityByIdRequestToJSON,
} from '../models/index';

export interface AddAvailabilityOperationRequest {
    apiKey: string;
    addAvailabilityRequest: AddAvailabilityRequest;
}

export interface EditAvailabilityByIdOperationRequest {
    apiKey: number;
    id: number;
    editAvailabilityByIdRequest: EditAvailabilityByIdRequest;
}

export interface GetAvailabilityByIdRequest {
    id: number;
    apiKey: number;
}

export interface RemoveAvailabilityByIdRequest {
    id: number;
    apiKey: number;
}

/**
 * 
 */
export class AvailabilitiesApi extends runtime.BaseAPI {

    /**
     * Creates a new availability
     */
    async addAvailabilityRaw(requestParameters: AddAvailabilityOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling addAvailability.');
        }

        if (requestParameters.addAvailabilityRequest === null || requestParameters.addAvailabilityRequest === undefined) {
            throw new runtime.RequiredError('addAvailabilityRequest','Required parameter requestParameters.addAvailabilityRequest was null or undefined when calling addAvailability.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/availabilities`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddAvailabilityRequestToJSON(requestParameters.addAvailabilityRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Creates a new availability
     */
    async addAvailability(requestParameters: AddAvailabilityOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addAvailabilityRaw(requestParameters, initOverrides);
    }

    /**
     * Edit an existing availability
     */
    async editAvailabilityByIdRaw(requestParameters: EditAvailabilityByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling editAvailabilityById.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling editAvailabilityById.');
        }

        if (requestParameters.editAvailabilityByIdRequest === null || requestParameters.editAvailabilityByIdRequest === undefined) {
            throw new runtime.RequiredError('editAvailabilityByIdRequest','Required parameter requestParameters.editAvailabilityByIdRequest was null or undefined when calling editAvailabilityById.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/availabilities/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: EditAvailabilityByIdRequestToJSON(requestParameters.editAvailabilityByIdRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Edit an existing availability
     */
    async editAvailabilityById(requestParameters: EditAvailabilityByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.editAvailabilityByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Find an availability
     */
    async getAvailabilityByIdRaw(requestParameters: GetAvailabilityByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAvailabilityById.');
        }

        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling getAvailabilityById.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/availabilities/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Find an availability
     */
    async getAvailabilityById(requestParameters: GetAvailabilityByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getAvailabilityByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Remove an existing availability
     */
    async removeAvailabilityByIdRaw(requestParameters: RemoveAvailabilityByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removeAvailabilityById.');
        }

        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling removeAvailabilityById.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/availabilities/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove an existing availability
     */
    async removeAvailabilityById(requestParameters: RemoveAvailabilityByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeAvailabilityByIdRaw(requestParameters, initOverrides);
    }

}
