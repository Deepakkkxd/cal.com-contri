/* tslint:disable */
/* eslint-disable */
/**
 * @calcom/api: Public API for Cal.com
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddBookingReferenceRequest,
  EditBookingReferenceByIdRequest,
} from '../models/index';
import {
    AddBookingReferenceRequestFromJSON,
    AddBookingReferenceRequestToJSON,
    EditBookingReferenceByIdRequestFromJSON,
    EditBookingReferenceByIdRequestToJSON,
} from '../models/index';

export interface AddBookingReferenceOperationRequest {
    apiKey: string;
    addBookingReferenceRequest: AddBookingReferenceRequest;
}

export interface EditBookingReferenceByIdOperationRequest {
    apiKey: string;
    id: number;
    editBookingReferenceByIdRequest: EditBookingReferenceByIdRequest;
}

export interface GetBookingReferenceByIdRequest {
    id: number;
    apiKey: string;
}

export interface ListBookingReferencesRequest {
    apiKey: string;
}

export interface RemoveBookingReferenceByIdRequest {
    id: number;
    apiKey: string;
}

/**
 * 
 */
export class BookingReferencesApi extends runtime.BaseAPI {

    /**
     * Creates a new  booking reference
     */
    async addBookingReferenceRaw(requestParameters: AddBookingReferenceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling addBookingReference.');
        }

        if (requestParameters.addBookingReferenceRequest === null || requestParameters.addBookingReferenceRequest === undefined) {
            throw new runtime.RequiredError('addBookingReferenceRequest','Required parameter requestParameters.addBookingReferenceRequest was null or undefined when calling addBookingReference.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/booking-references`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddBookingReferenceRequestToJSON(requestParameters.addBookingReferenceRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Creates a new  booking reference
     */
    async addBookingReference(requestParameters: AddBookingReferenceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addBookingReferenceRaw(requestParameters, initOverrides);
    }

    /**
     * Edit an existing booking reference
     */
    async editBookingReferenceByIdRaw(requestParameters: EditBookingReferenceByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling editBookingReferenceById.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling editBookingReferenceById.');
        }

        if (requestParameters.editBookingReferenceByIdRequest === null || requestParameters.editBookingReferenceByIdRequest === undefined) {
            throw new runtime.RequiredError('editBookingReferenceByIdRequest','Required parameter requestParameters.editBookingReferenceByIdRequest was null or undefined when calling editBookingReferenceById.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/booking-references/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: EditBookingReferenceByIdRequestToJSON(requestParameters.editBookingReferenceByIdRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Edit an existing booking reference
     */
    async editBookingReferenceById(requestParameters: EditBookingReferenceByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.editBookingReferenceByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Find a booking reference
     */
    async getBookingReferenceByIdRaw(requestParameters: GetBookingReferenceByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getBookingReferenceById.');
        }

        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling getBookingReferenceById.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/booking-references/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Find a booking reference
     */
    async getBookingReferenceById(requestParameters: GetBookingReferenceByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getBookingReferenceByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Find all booking references
     */
    async listBookingReferencesRaw(requestParameters: ListBookingReferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling listBookingReferences.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/booking-references`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Find all booking references
     */
    async listBookingReferences(requestParameters: ListBookingReferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.listBookingReferencesRaw(requestParameters, initOverrides);
    }

    /**
     * Remove an existing booking reference
     */
    async removeBookingReferenceByIdRaw(requestParameters: RemoveBookingReferenceByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removeBookingReferenceById.');
        }

        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling removeBookingReferenceById.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/booking-references/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove an existing booking reference
     */
    async removeBookingReferenceById(requestParameters: RemoveBookingReferenceByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeBookingReferenceByIdRaw(requestParameters, initOverrides);
    }

}
