/* tslint:disable */
/* eslint-disable */
/**
 * @calcom/api: Public API for Cal.com
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddBookingRequest,
  Booking,
  EditBookingByIdRequest,
  ListBookingsAttendeeEmailParameter,
  ListBookingsUserIdParameter,
} from '../models/index';
import {
    AddBookingRequestFromJSON,
    AddBookingRequestToJSON,
    BookingFromJSON,
    BookingToJSON,
    EditBookingByIdRequestFromJSON,
    EditBookingByIdRequestToJSON,
    ListBookingsAttendeeEmailParameterFromJSON,
    ListBookingsAttendeeEmailParameterToJSON,
    ListBookingsUserIdParameterFromJSON,
    ListBookingsUserIdParameterToJSON,
} from '../models/index';

export interface AddBookingOperationRequest {
    apiKey: string;
    addBookingRequest: AddBookingRequest;
}

export interface CancelBookingByIdRequest {
    id: number;
    apiKey: string;
    allRemainingBookings?: boolean;
    reason?: string;
}

export interface EditBookingByIdOperationRequest {
    apiKey: string;
    id: number;
    editBookingByIdRequest: EditBookingByIdRequest;
}

export interface GetBookingByIdRequest {
    id: number;
    apiKey: string;
}

export interface ListBookingsRequest {
    apiKey: string;
    userId?: ListBookingsUserIdParameter;
    attendeeEmail?: ListBookingsAttendeeEmailParameter;
}

/**
 * 
 */
export class BookingsApi extends runtime.BaseAPI {

    /**
     * Creates a new booking
     */
    async addBookingRaw(requestParameters: AddBookingOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling addBooking.');
        }

        if (requestParameters.addBookingRequest === null || requestParameters.addBookingRequest === undefined) {
            throw new runtime.RequiredError('addBookingRequest','Required parameter requestParameters.addBookingRequest was null or undefined when calling addBooking.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/bookings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddBookingRequestToJSON(requestParameters.addBookingRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Creates a new booking
     */
    async addBooking(requestParameters: AddBookingOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addBookingRaw(requestParameters, initOverrides);
    }

    /**
     * Booking cancellation
     */
    async cancelBookingByIdRaw(requestParameters: CancelBookingByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling cancelBookingById.');
        }

        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling cancelBookingById.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        if (requestParameters.allRemainingBookings !== undefined) {
            queryParameters['allRemainingBookings'] = requestParameters.allRemainingBookings;
        }

        if (requestParameters.reason !== undefined) {
            queryParameters['reason'] = requestParameters.reason;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/bookings/{id}/cancel`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Booking cancellation
     */
    async cancelBookingById(requestParameters: CancelBookingByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.cancelBookingByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Edit an existing booking
     */
    async editBookingByIdRaw(requestParameters: EditBookingByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling editBookingById.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling editBookingById.');
        }

        if (requestParameters.editBookingByIdRequest === null || requestParameters.editBookingByIdRequest === undefined) {
            throw new runtime.RequiredError('editBookingByIdRequest','Required parameter requestParameters.editBookingByIdRequest was null or undefined when calling editBookingById.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/bookings/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: EditBookingByIdRequestToJSON(requestParameters.editBookingByIdRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Edit an existing booking
     */
    async editBookingById(requestParameters: EditBookingByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.editBookingByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Find a booking
     */
    async getBookingByIdRaw(requestParameters: GetBookingByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Booking>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getBookingById.');
        }

        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling getBookingById.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/bookings/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookingFromJSON(jsonValue));
    }

    /**
     * Find a booking
     */
    async getBookingById(requestParameters: GetBookingByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Booking> {
        const response = await this.getBookingByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Find all bookings
     */
    async listBookingsRaw(requestParameters: ListBookingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Booking>>> {
        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling listBookings.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.attendeeEmail !== undefined) {
            queryParameters['attendeeEmail'] = requestParameters.attendeeEmail;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/bookings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BookingFromJSON));
    }

    /**
     * Find all bookings
     */
    async listBookings(requestParameters: ListBookingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Booking>> {
        const response = await this.listBookingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
