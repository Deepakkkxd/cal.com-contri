/* tslint:disable */
/* eslint-disable */
/**
 * @calcom/api: Public API for Cal.com
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CustomInputsIdPatchRequest,
  CustomInputsPostRequest,
} from '../models/index';
import {
    CustomInputsIdPatchRequestFromJSON,
    CustomInputsIdPatchRequestToJSON,
    CustomInputsPostRequestFromJSON,
    CustomInputsPostRequestToJSON,
} from '../models/index';

export interface CustomInputsGetRequest {
    apiKey: string;
}

export interface CustomInputsIdDeleteRequest {
    id: number;
    apiKey: string;
}

export interface CustomInputsIdGetRequest {
    id: number;
    apiKey: string;
}

export interface CustomInputsIdPatchOperationRequest {
    id: number;
    apiKey: string;
    customInputsIdPatchRequest: CustomInputsIdPatchRequest;
}

export interface CustomInputsPostOperationRequest {
    apiKey: string;
    customInputsPostRequest: CustomInputsPostRequest;
}

/**
 * 
 */
export class CustomInputsApi extends runtime.BaseAPI {

    /**
     * Find all eventTypeCustomInputs
     */
    async customInputsGetRaw(requestParameters: CustomInputsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling customInputsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/custom-inputs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Find all eventTypeCustomInputs
     */
    async customInputsGet(requestParameters: CustomInputsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.customInputsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Remove an existing eventTypeCustomInput
     */
    async customInputsIdDeleteRaw(requestParameters: CustomInputsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling customInputsIdDelete.');
        }

        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling customInputsIdDelete.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/custom-inputs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove an existing eventTypeCustomInput
     */
    async customInputsIdDelete(requestParameters: CustomInputsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.customInputsIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Find a eventTypeCustomInput
     */
    async customInputsIdGetRaw(requestParameters: CustomInputsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling customInputsIdGet.');
        }

        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling customInputsIdGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/custom-inputs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Find a eventTypeCustomInput
     */
    async customInputsIdGet(requestParameters: CustomInputsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.customInputsIdGetRaw(requestParameters, initOverrides);
    }

    /**
     * Edit an existing eventTypeCustomInput
     */
    async customInputsIdPatchRaw(requestParameters: CustomInputsIdPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling customInputsIdPatch.');
        }

        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling customInputsIdPatch.');
        }

        if (requestParameters.customInputsIdPatchRequest === null || requestParameters.customInputsIdPatchRequest === undefined) {
            throw new runtime.RequiredError('customInputsIdPatchRequest','Required parameter requestParameters.customInputsIdPatchRequest was null or undefined when calling customInputsIdPatch.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/custom-inputs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CustomInputsIdPatchRequestToJSON(requestParameters.customInputsIdPatchRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Edit an existing eventTypeCustomInput
     */
    async customInputsIdPatch(requestParameters: CustomInputsIdPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.customInputsIdPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Creates a new eventTypeCustomInput
     */
    async customInputsPostRaw(requestParameters: CustomInputsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling customInputsPost.');
        }

        if (requestParameters.customInputsPostRequest === null || requestParameters.customInputsPostRequest === undefined) {
            throw new runtime.RequiredError('customInputsPostRequest','Required parameter requestParameters.customInputsPostRequest was null or undefined when calling customInputsPost.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/custom-inputs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomInputsPostRequestToJSON(requestParameters.customInputsPostRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Creates a new eventTypeCustomInput
     */
    async customInputsPost(requestParameters: CustomInputsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.customInputsPostRaw(requestParameters, initOverrides);
    }

}
