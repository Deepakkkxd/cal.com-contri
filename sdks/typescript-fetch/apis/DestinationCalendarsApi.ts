/* tslint:disable */
/* eslint-disable */
/**
 * @calcom/api: Public API for Cal.com
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DestinationCalendarsIdPatchRequest,
  DestinationCalendarsPostRequest,
} from '../models/index';
import {
    DestinationCalendarsIdPatchRequestFromJSON,
    DestinationCalendarsIdPatchRequestToJSON,
    DestinationCalendarsPostRequestFromJSON,
    DestinationCalendarsPostRequestToJSON,
} from '../models/index';

export interface DestinationCalendarsGetRequest {
    apiKey: string;
}

export interface DestinationCalendarsIdDeleteRequest {
    id: number;
    apiKey: string;
}

export interface DestinationCalendarsIdGetRequest {
    id: number;
    apiKey: string;
}

export interface DestinationCalendarsIdPatchOperationRequest {
    id: number;
    apiKey: string;
    destinationCalendarsIdPatchRequest: DestinationCalendarsIdPatchRequest;
}

export interface DestinationCalendarsPostOperationRequest {
    apiKey: string;
    destinationCalendarsPostRequest: DestinationCalendarsPostRequest;
}

/**
 * 
 */
export class DestinationCalendarsApi extends runtime.BaseAPI {

    /**
     * Find all destination calendars
     */
    async destinationCalendarsGetRaw(requestParameters: DestinationCalendarsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling destinationCalendarsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/destination-calendars`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Find all destination calendars
     */
    async destinationCalendarsGet(requestParameters: DestinationCalendarsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.destinationCalendarsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Remove an existing destination calendar
     */
    async destinationCalendarsIdDeleteRaw(requestParameters: DestinationCalendarsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destinationCalendarsIdDelete.');
        }

        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling destinationCalendarsIdDelete.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/destination-calendars/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove an existing destination calendar
     */
    async destinationCalendarsIdDelete(requestParameters: DestinationCalendarsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.destinationCalendarsIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Find a destination calendar
     */
    async destinationCalendarsIdGetRaw(requestParameters: DestinationCalendarsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destinationCalendarsIdGet.');
        }

        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling destinationCalendarsIdGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/destination-calendars/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Find a destination calendar
     */
    async destinationCalendarsIdGet(requestParameters: DestinationCalendarsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.destinationCalendarsIdGetRaw(requestParameters, initOverrides);
    }

    /**
     * Edit an existing destination calendar
     */
    async destinationCalendarsIdPatchRaw(requestParameters: DestinationCalendarsIdPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destinationCalendarsIdPatch.');
        }

        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling destinationCalendarsIdPatch.');
        }

        if (requestParameters.destinationCalendarsIdPatchRequest === null || requestParameters.destinationCalendarsIdPatchRequest === undefined) {
            throw new runtime.RequiredError('destinationCalendarsIdPatchRequest','Required parameter requestParameters.destinationCalendarsIdPatchRequest was null or undefined when calling destinationCalendarsIdPatch.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/destination-calendars/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: DestinationCalendarsIdPatchRequestToJSON(requestParameters.destinationCalendarsIdPatchRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Edit an existing destination calendar
     */
    async destinationCalendarsIdPatch(requestParameters: DestinationCalendarsIdPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.destinationCalendarsIdPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Creates a new destination calendar
     */
    async destinationCalendarsPostRaw(requestParameters: DestinationCalendarsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling destinationCalendarsPost.');
        }

        if (requestParameters.destinationCalendarsPostRequest === null || requestParameters.destinationCalendarsPostRequest === undefined) {
            throw new runtime.RequiredError('destinationCalendarsPostRequest','Required parameter requestParameters.destinationCalendarsPostRequest was null or undefined when calling destinationCalendarsPost.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/destination-calendars`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DestinationCalendarsPostRequestToJSON(requestParameters.destinationCalendarsPostRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Creates a new destination calendar
     */
    async destinationCalendarsPost(requestParameters: DestinationCalendarsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.destinationCalendarsPostRaw(requestParameters, initOverrides);
    }

}
