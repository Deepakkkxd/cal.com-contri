/* tslint:disable */
/* eslint-disable */
/**
 * @calcom/api: Public API for Cal.com
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddEventTypeRequest,
  EditEventTypeByIdRequest,
} from '../models/index';
import {
    AddEventTypeRequestFromJSON,
    AddEventTypeRequestToJSON,
    EditEventTypeByIdRequestFromJSON,
    EditEventTypeByIdRequestToJSON,
} from '../models/index';

export interface AddEventTypeOperationRequest {
    apiKey: string;
    addEventTypeRequest: AddEventTypeRequest;
}

export interface EditEventTypeByIdOperationRequest {
    apiKey: string;
    id: number;
    editEventTypeByIdRequest: EditEventTypeByIdRequest;
}

export interface GetEventTypeByIdRequest {
    apiKey: string;
    id: number;
}

export interface ListEventTypesRequest {
    apiKey: string;
}

export interface ListEventTypesByTeamIdRequest {
    apiKey: string;
    teamId: number;
}

export interface RemoveEventTypeByIdRequest {
    apiKey: string;
    id: number;
}

/**
 * 
 */
export class EventTypesApi extends runtime.BaseAPI {

    /**
     * Creates a new event type
     */
    async addEventTypeRaw(requestParameters: AddEventTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling addEventType.');
        }

        if (requestParameters.addEventTypeRequest === null || requestParameters.addEventTypeRequest === undefined) {
            throw new runtime.RequiredError('addEventTypeRequest','Required parameter requestParameters.addEventTypeRequest was null or undefined when calling addEventType.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/event-types`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddEventTypeRequestToJSON(requestParameters.addEventTypeRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Creates a new event type
     */
    async addEventType(requestParameters: AddEventTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addEventTypeRaw(requestParameters, initOverrides);
    }

    /**
     * Edit an existing eventType
     */
    async editEventTypeByIdRaw(requestParameters: EditEventTypeByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling editEventTypeById.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling editEventTypeById.');
        }

        if (requestParameters.editEventTypeByIdRequest === null || requestParameters.editEventTypeByIdRequest === undefined) {
            throw new runtime.RequiredError('editEventTypeByIdRequest','Required parameter requestParameters.editEventTypeByIdRequest was null or undefined when calling editEventTypeById.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/event-types/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: EditEventTypeByIdRequestToJSON(requestParameters.editEventTypeByIdRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Edit an existing eventType
     */
    async editEventTypeById(requestParameters: EditEventTypeByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.editEventTypeByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Find a eventType
     */
    async getEventTypeByIdRaw(requestParameters: GetEventTypeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling getEventTypeById.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getEventTypeById.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/event-types/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Find a eventType
     */
    async getEventTypeById(requestParameters: GetEventTypeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getEventTypeByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Find all event types
     */
    async listEventTypesRaw(requestParameters: ListEventTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling listEventTypes.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/event-types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Find all event types
     */
    async listEventTypes(requestParameters: ListEventTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.listEventTypesRaw(requestParameters, initOverrides);
    }

    /**
     * Find all event types that belong to teamId
     */
    async listEventTypesByTeamIdRaw(requestParameters: ListEventTypesByTeamIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling listEventTypesByTeamId.');
        }

        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling listEventTypesByTeamId.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/teams/{teamId}/event-types`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Find all event types that belong to teamId
     */
    async listEventTypesByTeamId(requestParameters: ListEventTypesByTeamIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.listEventTypesByTeamIdRaw(requestParameters, initOverrides);
    }

    /**
     * Remove an existing eventType
     */
    async removeEventTypeByIdRaw(requestParameters: RemoveEventTypeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling removeEventTypeById.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removeEventTypeById.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/event-types/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove an existing eventType
     */
    async removeEventTypeById(requestParameters: RemoveEventTypeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeEventTypeByIdRaw(requestParameters, initOverrides);
    }

}
