/* tslint:disable */
/* eslint-disable */
/**
 * @calcom/api: Public API for Cal.com
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddScheduleRequest,
  EditScheduleByIdRequest,
} from '../models/index';
import {
    AddScheduleRequestFromJSON,
    AddScheduleRequestToJSON,
    EditScheduleByIdRequestFromJSON,
    EditScheduleByIdRequestToJSON,
} from '../models/index';

export interface AddScheduleOperationRequest {
    apiKey: string;
    addScheduleRequest: AddScheduleRequest;
}

export interface EditScheduleByIdOperationRequest {
    id: number;
    apiKey: string;
    editScheduleByIdRequest: EditScheduleByIdRequest;
}

export interface GetScheduleByIdRequest {
    id: number;
    apiKey: string;
}

export interface ListSchedulesRequest {
    apiKey: string;
}

export interface RemoveScheduleByIdRequest {
    id: number;
    apiKey: string;
}

/**
 * 
 */
export class SchedulesApi extends runtime.BaseAPI {

    /**
     * Creates a new schedule
     */
    async addScheduleRaw(requestParameters: AddScheduleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling addSchedule.');
        }

        if (requestParameters.addScheduleRequest === null || requestParameters.addScheduleRequest === undefined) {
            throw new runtime.RequiredError('addScheduleRequest','Required parameter requestParameters.addScheduleRequest was null or undefined when calling addSchedule.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/schedules`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddScheduleRequestToJSON(requestParameters.addScheduleRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Creates a new schedule
     */
    async addSchedule(requestParameters: AddScheduleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addScheduleRaw(requestParameters, initOverrides);
    }

    /**
     * Edit an existing schedule
     */
    async editScheduleByIdRaw(requestParameters: EditScheduleByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling editScheduleById.');
        }

        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling editScheduleById.');
        }

        if (requestParameters.editScheduleByIdRequest === null || requestParameters.editScheduleByIdRequest === undefined) {
            throw new runtime.RequiredError('editScheduleByIdRequest','Required parameter requestParameters.editScheduleByIdRequest was null or undefined when calling editScheduleById.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/schedules/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: EditScheduleByIdRequestToJSON(requestParameters.editScheduleByIdRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Edit an existing schedule
     */
    async editScheduleById(requestParameters: EditScheduleByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.editScheduleByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Find a schedule
     */
    async getScheduleByIdRaw(requestParameters: GetScheduleByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getScheduleById.');
        }

        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling getScheduleById.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/schedules/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Find a schedule
     */
    async getScheduleById(requestParameters: GetScheduleByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getScheduleByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Find all schedules
     */
    async listSchedulesRaw(requestParameters: ListSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling listSchedules.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/schedules`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Find all schedules
     */
    async listSchedules(requestParameters: ListSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.listSchedulesRaw(requestParameters, initOverrides);
    }

    /**
     * Remove an existing schedule
     */
    async removeScheduleByIdRaw(requestParameters: RemoveScheduleByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removeScheduleById.');
        }

        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling removeScheduleById.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/schedules/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove an existing schedule
     */
    async removeScheduleById(requestParameters: RemoveScheduleByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeScheduleByIdRaw(requestParameters, initOverrides);
    }

}
