/* tslint:disable */
/* eslint-disable */
/**
 * @calcom/api: Public API for Cal.com
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SelectedCalendarsPostRequest,
} from '../models/index';
import {
    SelectedCalendarsPostRequestFromJSON,
    SelectedCalendarsPostRequestToJSON,
} from '../models/index';

export interface EditSelectedCalendarByIdRequest {
    apiKey: string;
    userId: number;
    externalId: string;
    integration: string;
}

export interface GetSelectedCalendarByIdRequest {
    apiKey: string;
    userId: number;
    externalId: string;
    integration: string;
}

export interface ListSelectedCalendarsRequest {
    apiKey: string;
}

export interface RemoveSelectedCalendarByIdRequest {
    apiKey: string;
    userId: number;
    externalId: number;
    integration: string;
}

export interface SelectedCalendarsPostOperationRequest {
    apiKey: string;
    selectedCalendarsPostRequest: SelectedCalendarsPostRequest;
}

/**
 * 
 */
export class SelectedCalendarsApi extends runtime.BaseAPI {

    /**
     * Edit a selected calendar
     */
    async editSelectedCalendarByIdRaw(requestParameters: EditSelectedCalendarByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling editSelectedCalendarById.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling editSelectedCalendarById.');
        }

        if (requestParameters.externalId === null || requestParameters.externalId === undefined) {
            throw new runtime.RequiredError('externalId','Required parameter requestParameters.externalId was null or undefined when calling editSelectedCalendarById.');
        }

        if (requestParameters.integration === null || requestParameters.integration === undefined) {
            throw new runtime.RequiredError('integration','Required parameter requestParameters.integration was null or undefined when calling editSelectedCalendarById.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/selected-calendars/{userId}_{integration}_{externalId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"externalId"}}`, encodeURIComponent(String(requestParameters.externalId))).replace(`{${"integration"}}`, encodeURIComponent(String(requestParameters.integration))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Edit a selected calendar
     */
    async editSelectedCalendarById(requestParameters: EditSelectedCalendarByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.editSelectedCalendarByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Find a selected calendar by providing the compoundId(userId_integration_externalId) separated by `_`
     */
    async getSelectedCalendarByIdRaw(requestParameters: GetSelectedCalendarByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling getSelectedCalendarById.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getSelectedCalendarById.');
        }

        if (requestParameters.externalId === null || requestParameters.externalId === undefined) {
            throw new runtime.RequiredError('externalId','Required parameter requestParameters.externalId was null or undefined when calling getSelectedCalendarById.');
        }

        if (requestParameters.integration === null || requestParameters.integration === undefined) {
            throw new runtime.RequiredError('integration','Required parameter requestParameters.integration was null or undefined when calling getSelectedCalendarById.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/selected-calendars/{userId}_{integration}_{externalId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"externalId"}}`, encodeURIComponent(String(requestParameters.externalId))).replace(`{${"integration"}}`, encodeURIComponent(String(requestParameters.integration))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Find a selected calendar by providing the compoundId(userId_integration_externalId) separated by `_`
     */
    async getSelectedCalendarById(requestParameters: GetSelectedCalendarByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getSelectedCalendarByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Find all selected calendars
     */
    async listSelectedCalendarsRaw(requestParameters: ListSelectedCalendarsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling listSelectedCalendars.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/selected-calendars`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Find all selected calendars
     */
    async listSelectedCalendars(requestParameters: ListSelectedCalendarsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.listSelectedCalendarsRaw(requestParameters, initOverrides);
    }

    /**
     * Remove a selected calendar
     */
    async removeSelectedCalendarByIdRaw(requestParameters: RemoveSelectedCalendarByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling removeSelectedCalendarById.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling removeSelectedCalendarById.');
        }

        if (requestParameters.externalId === null || requestParameters.externalId === undefined) {
            throw new runtime.RequiredError('externalId','Required parameter requestParameters.externalId was null or undefined when calling removeSelectedCalendarById.');
        }

        if (requestParameters.integration === null || requestParameters.integration === undefined) {
            throw new runtime.RequiredError('integration','Required parameter requestParameters.integration was null or undefined when calling removeSelectedCalendarById.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/selected-calendars/{userId}_{integration}_{externalId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"externalId"}}`, encodeURIComponent(String(requestParameters.externalId))).replace(`{${"integration"}}`, encodeURIComponent(String(requestParameters.integration))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a selected calendar
     */
    async removeSelectedCalendarById(requestParameters: RemoveSelectedCalendarByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeSelectedCalendarByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Creates a new selected calendar
     */
    async selectedCalendarsPostRaw(requestParameters: SelectedCalendarsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling selectedCalendarsPost.');
        }

        if (requestParameters.selectedCalendarsPostRequest === null || requestParameters.selectedCalendarsPostRequest === undefined) {
            throw new runtime.RequiredError('selectedCalendarsPostRequest','Required parameter requestParameters.selectedCalendarsPostRequest was null or undefined when calling selectedCalendarsPost.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/selected-calendars`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SelectedCalendarsPostRequestToJSON(requestParameters.selectedCalendarsPostRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Creates a new selected calendar
     */
    async selectedCalendarsPost(requestParameters: SelectedCalendarsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.selectedCalendarsPostRaw(requestParameters, initOverrides);
    }

}
