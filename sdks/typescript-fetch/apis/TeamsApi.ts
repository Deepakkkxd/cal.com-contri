/* tslint:disable */
/* eslint-disable */
/**
 * @calcom/api: Public API for Cal.com
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddTeamRequest,
  EditTeamByIdRequest,
} from '../models/index';
import {
    AddTeamRequestFromJSON,
    AddTeamRequestToJSON,
    EditTeamByIdRequestFromJSON,
    EditTeamByIdRequestToJSON,
} from '../models/index';

export interface AddTeamOperationRequest {
    apiKey: string;
    addTeamRequest: AddTeamRequest;
}

export interface EditTeamByIdOperationRequest {
    teamId: number;
    apiKey: string;
    editTeamByIdRequest: EditTeamByIdRequest;
}

export interface GetTeamByIdRequest {
    teamId: number;
    apiKey: string;
}

export interface ListTeamsRequest {
    apiKey: string;
}

export interface RemoveTeamByIdRequest {
    teamId: number;
    apiKey: string;
}

/**
 * 
 */
export class TeamsApi extends runtime.BaseAPI {

    /**
     * Creates a new team
     */
    async addTeamRaw(requestParameters: AddTeamOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling addTeam.');
        }

        if (requestParameters.addTeamRequest === null || requestParameters.addTeamRequest === undefined) {
            throw new runtime.RequiredError('addTeamRequest','Required parameter requestParameters.addTeamRequest was null or undefined when calling addTeam.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/teams`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddTeamRequestToJSON(requestParameters.addTeamRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Creates a new team
     */
    async addTeam(requestParameters: AddTeamOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addTeamRaw(requestParameters, initOverrides);
    }

    /**
     * Edit an existing team
     */
    async editTeamByIdRaw(requestParameters: EditTeamByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling editTeamById.');
        }

        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling editTeamById.');
        }

        if (requestParameters.editTeamByIdRequest === null || requestParameters.editTeamByIdRequest === undefined) {
            throw new runtime.RequiredError('editTeamByIdRequest','Required parameter requestParameters.editTeamByIdRequest was null or undefined when calling editTeamById.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/teams/{teamId}`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: EditTeamByIdRequestToJSON(requestParameters.editTeamByIdRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Edit an existing team
     */
    async editTeamById(requestParameters: EditTeamByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.editTeamByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Find a team
     */
    async getTeamByIdRaw(requestParameters: GetTeamByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling getTeamById.');
        }

        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling getTeamById.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/teams/{teamId}`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Find a team
     */
    async getTeamById(requestParameters: GetTeamByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getTeamByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Find all teams
     */
    async listTeamsRaw(requestParameters: ListTeamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling listTeams.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/teams`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Find all teams
     */
    async listTeams(requestParameters: ListTeamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.listTeamsRaw(requestParameters, initOverrides);
    }

    /**
     * Remove an existing team
     */
    async removeTeamByIdRaw(requestParameters: RemoveTeamByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling removeTeamById.');
        }

        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling removeTeamById.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/teams/{teamId}`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove an existing team
     */
    async removeTeamById(requestParameters: RemoveTeamByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeTeamByIdRaw(requestParameters, initOverrides);
    }

}
