/* tslint:disable */
/* eslint-disable */
/**
 * @calcom/api: Public API for Cal.com
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddWebhookRequest,
  EditWebhookByIdRequest,
} from '../models/index';
import {
    AddWebhookRequestFromJSON,
    AddWebhookRequestToJSON,
    EditWebhookByIdRequestFromJSON,
    EditWebhookByIdRequestToJSON,
} from '../models/index';

export interface AddWebhookOperationRequest {
    apiKey: string;
    addWebhookRequest: AddWebhookRequest;
}

export interface EditWebhookByIdOperationRequest {
    id: number;
    apiKey: string;
    editWebhookByIdRequest: EditWebhookByIdRequest;
}

export interface GetWebhookByIdRequest {
    id: number;
    apiKey: string;
}

export interface ListWebhooksRequest {
    apiKey: string;
}

export interface RemoveWebhookByIdRequest {
    id: number;
    apiKey: string;
}

/**
 * 
 */
export class WebhooksApi extends runtime.BaseAPI {

    /**
     * Creates a new webhook
     */
    async addWebhookRaw(requestParameters: AddWebhookOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling addWebhook.');
        }

        if (requestParameters.addWebhookRequest === null || requestParameters.addWebhookRequest === undefined) {
            throw new runtime.RequiredError('addWebhookRequest','Required parameter requestParameters.addWebhookRequest was null or undefined when calling addWebhook.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/webhooks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddWebhookRequestToJSON(requestParameters.addWebhookRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Creates a new webhook
     */
    async addWebhook(requestParameters: AddWebhookOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addWebhookRaw(requestParameters, initOverrides);
    }

    /**
     * Edit an existing webhook
     */
    async editWebhookByIdRaw(requestParameters: EditWebhookByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling editWebhookById.');
        }

        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling editWebhookById.');
        }

        if (requestParameters.editWebhookByIdRequest === null || requestParameters.editWebhookByIdRequest === undefined) {
            throw new runtime.RequiredError('editWebhookByIdRequest','Required parameter requestParameters.editWebhookByIdRequest was null or undefined when calling editWebhookById.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/webhooks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: EditWebhookByIdRequestToJSON(requestParameters.editWebhookByIdRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Edit an existing webhook
     */
    async editWebhookById(requestParameters: EditWebhookByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.editWebhookByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Find a webhook
     */
    async getWebhookByIdRaw(requestParameters: GetWebhookByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getWebhookById.');
        }

        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling getWebhookById.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/webhooks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Find a webhook
     */
    async getWebhookById(requestParameters: GetWebhookByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getWebhookByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Find all webhooks
     */
    async listWebhooksRaw(requestParameters: ListWebhooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling listWebhooks.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/webhooks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Find all webhooks
     */
    async listWebhooks(requestParameters: ListWebhooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.listWebhooksRaw(requestParameters, initOverrides);
    }

    /**
     * Remove an existing hook
     */
    async removeWebhookByIdRaw(requestParameters: RemoveWebhookByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removeWebhookById.');
        }

        if (requestParameters.apiKey === null || requestParameters.apiKey === undefined) {
            throw new runtime.RequiredError('apiKey','Required parameter requestParameters.apiKey was null or undefined when calling removeWebhookById.');
        }

        const queryParameters: any = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/webhooks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove an existing hook
     */
    async removeWebhookById(requestParameters: RemoveWebhookByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeWebhookByIdRaw(requestParameters, initOverrides);
    }

}
