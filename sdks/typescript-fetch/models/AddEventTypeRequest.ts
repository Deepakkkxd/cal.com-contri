/* tslint:disable */
/* eslint-disable */
/**
 * @calcom/api: Public API for Cal.com
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AddEventTypeRequestHostsInner } from './AddEventTypeRequestHostsInner';
import {
    AddEventTypeRequestHostsInnerFromJSON,
    AddEventTypeRequestHostsInnerFromJSONTyped,
    AddEventTypeRequestHostsInnerToJSON,
} from './AddEventTypeRequestHostsInner';
import type { AddEventTypeRequestLocationsInnerInner } from './AddEventTypeRequestLocationsInnerInner';
import {
    AddEventTypeRequestLocationsInnerInnerFromJSON,
    AddEventTypeRequestLocationsInnerInnerFromJSONTyped,
    AddEventTypeRequestLocationsInnerInnerToJSON,
} from './AddEventTypeRequestLocationsInnerInner';
import type { AddEventTypeRequestRecurringEvent } from './AddEventTypeRequestRecurringEvent';
import {
    AddEventTypeRequestRecurringEventFromJSON,
    AddEventTypeRequestRecurringEventFromJSONTyped,
    AddEventTypeRequestRecurringEventToJSON,
} from './AddEventTypeRequestRecurringEvent';

/**
 * 
 * @export
 * @interface AddEventTypeRequest
 */
export interface AddEventTypeRequest {
    /**
     * Duration of the event type in minutes
     * @type {number}
     * @memberof AddEventTypeRequest
     */
    length: number;
    /**
     * Metadata relating to event type. Pass {} if empty
     * @type {object}
     * @memberof AddEventTypeRequest
     */
    metadata: object;
    /**
     * Title of the event type
     * @type {string}
     * @memberof AddEventTypeRequest
     */
    title: string;
    /**
     * Unique slug for the event type
     * @type {string}
     * @memberof AddEventTypeRequest
     */
    slug: string;
    /**
     * 
     * @type {Array<AddEventTypeRequestHostsInner>}
     * @memberof AddEventTypeRequest
     */
    hosts?: Array<AddEventTypeRequestHostsInner>;
    /**
     * If the event type should be hidden from your public booking page
     * @type {boolean}
     * @memberof AddEventTypeRequest
     */
    hidden?: boolean;
    /**
     * The ID of the schedule for this event type
     * @type {number}
     * @memberof AddEventTypeRequest
     */
    scheduleId?: number;
    /**
     * The position of the event type on the public booking page
     * @type {number}
     * @memberof AddEventTypeRequest
     */
    position?: number;
    /**
     * Team ID if the event type should belong to a team
     * @type {number}
     * @memberof AddEventTypeRequest
     */
    teamId?: number;
    /**
     * To decide how far into the future an invitee can book an event with you
     * @type {string}
     * @memberof AddEventTypeRequest
     */
    periodType?: AddEventTypeRequestPeriodTypeEnum;
    /**
     * Start date of bookable period (Required if periodType is 'range')
     * @type {Date}
     * @memberof AddEventTypeRequest
     */
    periodStartDate?: Date;
    /**
     * End date of bookable period (Required if periodType is 'range')
     * @type {Date}
     * @memberof AddEventTypeRequest
     */
    periodEndDate?: Date;
    /**
     * Number of bookable days (Required if periodType is rolling)
     * @type {number}
     * @memberof AddEventTypeRequest
     */
    periodDays?: number;
    /**
     * If calendar days should be counted for period days
     * @type {boolean}
     * @memberof AddEventTypeRequest
     */
    periodCountCalendarDays?: boolean;
    /**
     * If the event type should require your confirmation before completing the booking
     * @type {boolean}
     * @memberof AddEventTypeRequest
     */
    requiresConfirmation?: boolean;
    /**
     * 
     * @type {AddEventTypeRequestRecurringEvent}
     * @memberof AddEventTypeRequest
     */
    recurringEvent?: AddEventTypeRequestRecurringEvent;
    /**
     * If the event type should disable adding guests to the booking
     * @type {boolean}
     * @memberof AddEventTypeRequest
     */
    disableGuests?: boolean;
    /**
     * If the calendar notes should be hidden from the booking
     * @type {boolean}
     * @memberof AddEventTypeRequest
     */
    hideCalendarNotes?: boolean;
    /**
     * Minimum time in minutes before the event is bookable
     * @type {number}
     * @memberof AddEventTypeRequest
     */
    minimumBookingNotice?: number;
    /**
     * Number of minutes of buffer time before a Cal Event
     * @type {number}
     * @memberof AddEventTypeRequest
     */
    beforeEventBuffer?: number;
    /**
     * Number of minutes of buffer time after a Cal Event
     * @type {number}
     * @memberof AddEventTypeRequest
     */
    afterEventBuffer?: number;
    /**
     * The type of scheduling if a Team event. Required for team events only
     * @type {string}
     * @memberof AddEventTypeRequest
     */
    schedulingType?: AddEventTypeRequestSchedulingTypeEnum;
    /**
     * Price of the event type booking
     * @type {number}
     * @memberof AddEventTypeRequest
     */
    price?: number;
    /**
     * EventTypeId of the parent managed event
     * @type {number}
     * @memberof AddEventTypeRequest
     */
    parentId?: number;
    /**
     * Currency acronym. Eg- usd, eur, gbp, etc.
     * @type {string}
     * @memberof AddEventTypeRequest
     */
    currency?: string;
    /**
     * The intervals of available bookable slots in minutes
     * @type {number}
     * @memberof AddEventTypeRequest
     */
    slotInterval?: number;
    /**
     * A valid URL where the booker will redirect to, once the booking is completed successfully
     * @type {string}
     * @memberof AddEventTypeRequest
     */
    successRedirectUrl?: string;
    /**
     * Description of the event type
     * @type {string}
     * @memberof AddEventTypeRequest
     */
    description?: string;
    /**
     * A list of all available locations for the event type
     * @type {Array<Array<AddEventTypeRequestLocationsInnerInner>>}
     * @memberof AddEventTypeRequest
     */
    locations?: Array<Array<AddEventTypeRequestLocationsInnerInner>>;
}


/**
 * @export
 */
export const AddEventTypeRequestPeriodTypeEnum = {
    Unlimited: 'UNLIMITED',
    Rolling: 'ROLLING',
    Range: 'RANGE'
} as const;
export type AddEventTypeRequestPeriodTypeEnum = typeof AddEventTypeRequestPeriodTypeEnum[keyof typeof AddEventTypeRequestPeriodTypeEnum];

/**
 * @export
 */
export const AddEventTypeRequestSchedulingTypeEnum = {
    RoundRobin: 'ROUND_ROBIN',
    Collective: 'COLLECTIVE',
    Managed: 'MANAGED'
} as const;
export type AddEventTypeRequestSchedulingTypeEnum = typeof AddEventTypeRequestSchedulingTypeEnum[keyof typeof AddEventTypeRequestSchedulingTypeEnum];


/**
 * Check if a given object implements the AddEventTypeRequest interface.
 */
export function instanceOfAddEventTypeRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "length" in value;
    isInstance = isInstance && "metadata" in value;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "slug" in value;

    return isInstance;
}

export function AddEventTypeRequestFromJSON(json: any): AddEventTypeRequest {
    return AddEventTypeRequestFromJSONTyped(json, false);
}

export function AddEventTypeRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): AddEventTypeRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'length': json['length'],
        'metadata': json['metadata'],
        'title': json['title'],
        'slug': json['slug'],
        'hosts': !exists(json, 'hosts') ? undefined : ((json['hosts'] as Array<any>).map(AddEventTypeRequestHostsInnerFromJSON)),
        'hidden': !exists(json, 'hidden') ? undefined : json['hidden'],
        'scheduleId': !exists(json, 'scheduleId') ? undefined : json['scheduleId'],
        'position': !exists(json, 'position') ? undefined : json['position'],
        'teamId': !exists(json, 'teamId') ? undefined : json['teamId'],
        'periodType': !exists(json, 'periodType') ? undefined : json['periodType'],
        'periodStartDate': !exists(json, 'periodStartDate') ? undefined : (new Date(json['periodStartDate'])),
        'periodEndDate': !exists(json, 'periodEndDate') ? undefined : (new Date(json['periodEndDate'])),
        'periodDays': !exists(json, 'periodDays') ? undefined : json['periodDays'],
        'periodCountCalendarDays': !exists(json, 'periodCountCalendarDays') ? undefined : json['periodCountCalendarDays'],
        'requiresConfirmation': !exists(json, 'requiresConfirmation') ? undefined : json['requiresConfirmation'],
        'recurringEvent': !exists(json, 'recurringEvent') ? undefined : AddEventTypeRequestRecurringEventFromJSON(json['recurringEvent']),
        'disableGuests': !exists(json, 'disableGuests') ? undefined : json['disableGuests'],
        'hideCalendarNotes': !exists(json, 'hideCalendarNotes') ? undefined : json['hideCalendarNotes'],
        'minimumBookingNotice': !exists(json, 'minimumBookingNotice') ? undefined : json['minimumBookingNotice'],
        'beforeEventBuffer': !exists(json, 'beforeEventBuffer') ? undefined : json['beforeEventBuffer'],
        'afterEventBuffer': !exists(json, 'afterEventBuffer') ? undefined : json['afterEventBuffer'],
        'schedulingType': !exists(json, 'schedulingType') ? undefined : json['schedulingType'],
        'price': !exists(json, 'price') ? undefined : json['price'],
        'parentId': !exists(json, 'parentId') ? undefined : json['parentId'],
        'currency': !exists(json, 'currency') ? undefined : json['currency'],
        'slotInterval': !exists(json, 'slotInterval') ? undefined : json['slotInterval'],
        'successRedirectUrl': !exists(json, 'successRedirectUrl') ? undefined : json['successRedirectUrl'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'locations': !exists(json, 'locations') ? undefined : json['locations'],
    };
}

export function AddEventTypeRequestToJSON(value?: AddEventTypeRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'length': value.length,
        'metadata': value.metadata,
        'title': value.title,
        'slug': value.slug,
        'hosts': value.hosts === undefined ? undefined : ((value.hosts as Array<any>).map(AddEventTypeRequestHostsInnerToJSON)),
        'hidden': value.hidden,
        'scheduleId': value.scheduleId,
        'position': value.position,
        'teamId': value.teamId,
        'periodType': value.periodType,
        'periodStartDate': value.periodStartDate === undefined ? undefined : (value.periodStartDate.toISOString()),
        'periodEndDate': value.periodEndDate === undefined ? undefined : (value.periodEndDate.toISOString()),
        'periodDays': value.periodDays,
        'periodCountCalendarDays': value.periodCountCalendarDays,
        'requiresConfirmation': value.requiresConfirmation,
        'recurringEvent': AddEventTypeRequestRecurringEventToJSON(value.recurringEvent),
        'disableGuests': value.disableGuests,
        'hideCalendarNotes': value.hideCalendarNotes,
        'minimumBookingNotice': value.minimumBookingNotice,
        'beforeEventBuffer': value.beforeEventBuffer,
        'afterEventBuffer': value.afterEventBuffer,
        'schedulingType': value.schedulingType,
        'price': value.price,
        'parentId': value.parentId,
        'currency': value.currency,
        'slotInterval': value.slotInterval,
        'successRedirectUrl': value.successRedirectUrl,
        'description': value.description,
        'locations': value.locations,
    };
}

