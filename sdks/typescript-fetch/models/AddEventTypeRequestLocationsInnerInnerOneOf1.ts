/* tslint:disable */
/* eslint-disable */
/**
 * @calcom/api: Public API for Cal.com
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AddEventTypeRequestLocationsInnerInnerOneOf1
 */
export interface AddEventTypeRequestLocationsInnerInnerOneOf1 {
    /**
     * 
     * @type {string}
     * @memberof AddEventTypeRequestLocationsInnerInnerOneOf1
     */
    type?: AddEventTypeRequestLocationsInnerInnerOneOf1TypeEnum;
}


/**
 * @export
 */
export const AddEventTypeRequestLocationsInnerInnerOneOf1TypeEnum = {
    AttendeeInPerson: 'attendeeInPerson'
} as const;
export type AddEventTypeRequestLocationsInnerInnerOneOf1TypeEnum = typeof AddEventTypeRequestLocationsInnerInnerOneOf1TypeEnum[keyof typeof AddEventTypeRequestLocationsInnerInnerOneOf1TypeEnum];


/**
 * Check if a given object implements the AddEventTypeRequestLocationsInnerInnerOneOf1 interface.
 */
export function instanceOfAddEventTypeRequestLocationsInnerInnerOneOf1(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AddEventTypeRequestLocationsInnerInnerOneOf1FromJSON(json: any): AddEventTypeRequestLocationsInnerInnerOneOf1 {
    return AddEventTypeRequestLocationsInnerInnerOneOf1FromJSONTyped(json, false);
}

export function AddEventTypeRequestLocationsInnerInnerOneOf1FromJSONTyped(json: any, ignoreDiscriminator: boolean): AddEventTypeRequestLocationsInnerInnerOneOf1 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': !exists(json, 'type') ? undefined : json['type'],
    };
}

export function AddEventTypeRequestLocationsInnerInnerOneOf1ToJSON(value?: AddEventTypeRequestLocationsInnerInnerOneOf1 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
    };
}

