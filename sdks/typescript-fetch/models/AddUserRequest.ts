/* tslint:disable */
/* eslint-disable */
/**
 * @calcom/api: Public API for Cal.com
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AddUserRequest
 */
export interface AddUserRequest {
    /**
     * Email that belongs to the user being edited
     * @type {string}
     * @memberof AddUserRequest
     */
    email: string;
    /**
     * Username for the user being created
     * @type {string}
     * @memberof AddUserRequest
     */
    username: string;
    /**
     * The new user's brand color
     * @type {string}
     * @memberof AddUserRequest
     */
    brandColor?: string;
    /**
     * The new user's brand color for dark mode
     * @type {string}
     * @memberof AddUserRequest
     */
    darkBrandColor?: string;
    /**
     * Remove branding from the user's calendar page
     * @type {boolean}
     * @memberof AddUserRequest
     */
    hideBranding?: boolean;
    /**
     * Start of the week. Acceptable values are one of [SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY]
     * @type {string}
     * @memberof AddUserRequest
     */
    weekStart?: string;
    /**
     * The new user's time zone. Eg- 'EUROPE/PARIS'
     * @type {string}
     * @memberof AddUserRequest
     */
    timeZone?: string;
    /**
     * Default theme for the new user. Acceptable values are one of [DARK, LIGHT]
     * @type {string}
     * @memberof AddUserRequest
     */
    theme?: string;
    /**
     * The new user's time format. Acceptable values are one of [TWELVE, TWENTY_FOUR]
     * @type {string}
     * @memberof AddUserRequest
     */
    timeFormat?: string;
    /**
     * The new user's locale. Acceptable values are one of [EN, FR, IT, RU, ES, DE, PT, RO, NL, PT_BR, ES_419, KO, JA, PL, AR, IW, ZH_CH, ZH_TW, CS, SR, SV, VI]
     * @type {string}
     * @memberof AddUserRequest
     */
    locale?: string;
    /**
     * The user's avatar, in base64 format
     * @type {string}
     * @memberof AddUserRequest
     */
    avatar?: string;
}

/**
 * Check if a given object implements the AddUserRequest interface.
 */
export function instanceOfAddUserRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "email" in value;
    isInstance = isInstance && "username" in value;

    return isInstance;
}

export function AddUserRequestFromJSON(json: any): AddUserRequest {
    return AddUserRequestFromJSONTyped(json, false);
}

export function AddUserRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): AddUserRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'email': json['email'],
        'username': json['username'],
        'brandColor': !exists(json, 'brandColor') ? undefined : json['brandColor'],
        'darkBrandColor': !exists(json, 'darkBrandColor') ? undefined : json['darkBrandColor'],
        'hideBranding': !exists(json, 'hideBranding') ? undefined : json['hideBranding'],
        'weekStart': !exists(json, 'weekStart') ? undefined : json['weekStart'],
        'timeZone': !exists(json, 'timeZone') ? undefined : json['timeZone'],
        'theme': !exists(json, 'theme') ? undefined : json['theme'],
        'timeFormat': !exists(json, 'timeFormat') ? undefined : json['timeFormat'],
        'locale': !exists(json, 'locale') ? undefined : json['locale'],
        'avatar': !exists(json, 'avatar') ? undefined : json['avatar'],
    };
}

export function AddUserRequestToJSON(value?: AddUserRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'email': value.email,
        'username': value.username,
        'brandColor': value.brandColor,
        'darkBrandColor': value.darkBrandColor,
        'hideBranding': value.hideBranding,
        'weekStart': value.weekStart,
        'timeZone': value.timeZone,
        'theme': value.theme,
        'timeFormat': value.timeFormat,
        'locale': value.locale,
        'avatar': value.avatar,
    };
}

