/* tslint:disable */
/* eslint-disable */
/**
 * @calcom/api: Public API for Cal.com
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AddWebhookRequest
 */
export interface AddWebhookRequest {
    /**
     * The URL to subscribe to this webhook
     * @type {string}
     * @memberof AddWebhookRequest
     */
    subscriberUrl: string;
    /**
     * The events which should trigger this webhook call
     * @type {string}
     * @memberof AddWebhookRequest
     */
    eventTriggers: AddWebhookRequestEventTriggersEnum;
    /**
     * Whether the webhook is active and should trigger on associated trigger events
     * @type {boolean}
     * @memberof AddWebhookRequest
     */
    active: boolean;
    /**
     * The template of the webhook's payload
     * @type {string}
     * @memberof AddWebhookRequest
     */
    payloadTemplate?: string;
    /**
     * The event type ID if this webhook should be associated with only that event type
     * @type {number}
     * @memberof AddWebhookRequest
     */
    eventTypeId?: number;
    /**
     * The secret to verify the authenticity of the received payload
     * @type {string}
     * @memberof AddWebhookRequest
     */
    secret?: string;
}


/**
 * @export
 */
export const AddWebhookRequestEventTriggersEnum = {
    BookingCreated: 'BOOKING_CREATED',
    BookingRescheduled: 'BOOKING_RESCHEDULED',
    BookingCancelled: 'BOOKING_CANCELLED',
    MeetingEnded: 'MEETING_ENDED'
} as const;
export type AddWebhookRequestEventTriggersEnum = typeof AddWebhookRequestEventTriggersEnum[keyof typeof AddWebhookRequestEventTriggersEnum];


/**
 * Check if a given object implements the AddWebhookRequest interface.
 */
export function instanceOfAddWebhookRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "subscriberUrl" in value;
    isInstance = isInstance && "eventTriggers" in value;
    isInstance = isInstance && "active" in value;

    return isInstance;
}

export function AddWebhookRequestFromJSON(json: any): AddWebhookRequest {
    return AddWebhookRequestFromJSONTyped(json, false);
}

export function AddWebhookRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): AddWebhookRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'subscriberUrl': json['subscriberUrl'],
        'eventTriggers': json['eventTriggers'],
        'active': json['active'],
        'payloadTemplate': !exists(json, 'payloadTemplate') ? undefined : json['payloadTemplate'],
        'eventTypeId': !exists(json, 'eventTypeId') ? undefined : json['eventTypeId'],
        'secret': !exists(json, 'secret') ? undefined : json['secret'],
    };
}

export function AddWebhookRequestToJSON(value?: AddWebhookRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'subscriberUrl': value.subscriberUrl,
        'eventTriggers': value.eventTriggers,
        'active': value.active,
        'payloadTemplate': value.payloadTemplate,
        'eventTypeId': value.eventTypeId,
        'secret': value.secret,
    };
}

