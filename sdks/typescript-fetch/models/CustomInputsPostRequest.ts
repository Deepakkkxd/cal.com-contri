/* tslint:disable */
/* eslint-disable */
/**
 * @calcom/api: Public API for Cal.com
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CustomInputsPostRequestOptions } from './CustomInputsPostRequestOptions';
import {
    CustomInputsPostRequestOptionsFromJSON,
    CustomInputsPostRequestOptionsFromJSONTyped,
    CustomInputsPostRequestOptionsToJSON,
} from './CustomInputsPostRequestOptions';

/**
 * 
 * @export
 * @interface CustomInputsPostRequest
 */
export interface CustomInputsPostRequest {
    /**
     * ID of the event type to which the custom input is being added
     * @type {number}
     * @memberof CustomInputsPostRequest
     */
    eventTypeId: number;
    /**
     * Label of the custom input
     * @type {string}
     * @memberof CustomInputsPostRequest
     */
    label: string;
    /**
     * Type of the custom input. The value is ENUM; one of [TEXT, TEXTLONG, NUMBER, BOOL, RADIO, PHONE]
     * @type {string}
     * @memberof CustomInputsPostRequest
     */
    type: string;
    /**
     * 
     * @type {CustomInputsPostRequestOptions}
     * @memberof CustomInputsPostRequest
     */
    options?: CustomInputsPostRequestOptions;
    /**
     * If the custom input is required before booking
     * @type {boolean}
     * @memberof CustomInputsPostRequest
     */
    required: boolean;
    /**
     * Placeholder text for the custom input
     * @type {string}
     * @memberof CustomInputsPostRequest
     */
    placeholder: string;
}

/**
 * Check if a given object implements the CustomInputsPostRequest interface.
 */
export function instanceOfCustomInputsPostRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "eventTypeId" in value;
    isInstance = isInstance && "label" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "required" in value;
    isInstance = isInstance && "placeholder" in value;

    return isInstance;
}

export function CustomInputsPostRequestFromJSON(json: any): CustomInputsPostRequest {
    return CustomInputsPostRequestFromJSONTyped(json, false);
}

export function CustomInputsPostRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CustomInputsPostRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'eventTypeId': json['eventTypeId'],
        'label': json['label'],
        'type': json['type'],
        'options': !exists(json, 'options') ? undefined : CustomInputsPostRequestOptionsFromJSON(json['options']),
        'required': json['required'],
        'placeholder': json['placeholder'],
    };
}

export function CustomInputsPostRequestToJSON(value?: CustomInputsPostRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'eventTypeId': value.eventTypeId,
        'label': value.label,
        'type': value.type,
        'options': CustomInputsPostRequestOptionsToJSON(value.options),
        'required': value.required,
        'placeholder': value.placeholder,
    };
}

